/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 10.09.2025 01:28:39

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242592;
#else
constexpr int kTensorArenaSize = 241568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[4] = { 19854, -37995, -35257, -31102, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, float> quant2_scale = { 4, { 0.00026892629102803767, 0.00016330505604855716, 0.00016856194997671992, 0.00019560278451535851, } };
const TfArray<4, int> quant2_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[4*1*1*32] = { 
  /* [0][0][][] */ 3,-33,-81,-20,55,11,19,-42,85,-10,61,45,-43,-7,81,-39,-15,-1,-63,54,11,81,0,13,-35,111,-29,61,127,-70,26,-24, 
  /* [1][0][][] */ 59,80,-87,-7,-35,42,114,42,-36,-64,-82,32,92,-49,93,-120,114,-96,24,-53,14,-93,-105,-7,-25,-127,66,-66,-54,-108,-21,-17, 
  /* [2][0][][] */ -28,100,18,68,-57,-10,83,40,-66,-89,80,-61,-86,91,-110,73,47,71,78,-65,-31,5,-43,-17,20,-99,79,-127,-52,10,63,72, 
  /* [3][0][][] */ 66,-58,74,14,-32,86,24,-2,-2,-77,33,94,62,-15,-89,-30,88,-106,91,-6,-108,-16,-85,-18,88,-47,-91,38,-127,102,30,39, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant3_scale = { 4, { 0.0057241059839725494, 0.003475954057648778, 0.0035878473427146673, 0.0041634123772382736, } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 275, -464, -377, -226, 619, 0, -271, -682, -65, -235, 109, 687, 290, -477, 302, -484, -226, 240, -169, 94, 590, 1641, 2277, -545, 47, 2480, -177, 1796, 1765, 65, -758, -217, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.1344588428037241e-05, 5.1103626901749521e-05, 5.5298769439104944e-05, 4.5011976908426732e-05, 8.3535596786532551e-05, 4.3847496272064745e-05, 4.5422017137752846e-05, 4.9991664127446711e-05, 4.6767410822212696e-05, 4.8054855142254382e-05, 4.6901110181352124e-05, 4.7699781134724617e-05, 6.1460465076379478e-05, 5.4853269830346107e-05, 4.9181984650203958e-05, 5.1184240874135867e-05, 4.6328885218827054e-05, 4.8781344958115369e-05, 4.378231824375689e-05, 4.3050506064901128e-05, 5.5645679822191596e-05, 5.1518789405236021e-05, 6.2037986936047673e-05, 4.8546120524406433e-05, 5.8095054555451497e-05, 7.1930509875528514e-05, 5.122800575918518e-05, 5.0922950322274119e-05, 7.5483781984075904e-05, 4.6477707655867562e-05, 4.4710501242661849e-05, 4.4336982682580128e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -28,-38,88,0,94,-2,-70,-66,44,-64,-89,-8,52,11,-22,52,-40,-9,-40,-44,-51,-81,4,84,-116,16,81,-39,103,19,-9,-64,60,-45,-75,63,-77,-68,-63,46,83,-97,-127,95,51,-84,93,-6,-8,-56,-13,119,-54,-20,-66,94,30,64,100,-75,-52,83,-27,44,5,24,74,88,55,67,79,-94,94,-79,45,77,-79,-9,-50,24,41,5,82,-1,-46,-28,-84,85,30,116,0,-99,4,73,33,24, 
  /* [1][0][][] */ -35,8,-56,12,-27,90,29,-12,97,-80,-94,123,67,-9,29,50,116,-23,26,108,-33,11,32,45,25,16,-23,82,9,-31,80,-55,68,95,-1,29,54,54,-36,-64,-66,7,0,-97,-27,47,-5,-37,0,-74,109,72,3,60,-64,-31,23,95,55,75,-54,101,-62,-81,-42,18,56,27,91,50,32,11,-87,82,-73,28,68,-13,-42,64,-64,75,-50,-127,31,105,-42,-43,23,56,74,46,81,92,23,-16, 
  /* [2][0][][] */ 23,25,-60,50,-28,-75,63,101,-118,88,-61,62,60,-22,56,-87,-79,-32,43,25,-105,-4,72,-12,5,71,74,-25,-56,82,54,41,-68,-31,-77,-78,-78,69,96,-23,-112,-82,9,-3,-80,51,-30,-72,55,7,55,-127,-49,39,24,11,-50,61,-58,-21,-36,38,-28,66,56,11,44,65,-93,31,-15,-87,34,-40,48,-2,-70,-33,-8,4,9,-106,19,-58,4,-96,-43,-68,79,108,-18,-17,-29,-77,-78,-41, 
  /* [3][0][][] */ 72,-21,29,-20,-78,23,-110,27,48,11,57,-6,90,97,69,-10,83,86,-62,11,105,-74,-66,-123,-31,-110,-90,75,39,-109,64,-8,-49,-39,-12,-8,-95,-21,28,31,-43,-101,-84,-12,60,15,-49,-90,59,-72,29,-16,78,14,73,-92,-117,-121,-127,-65,-112,21,-47,62,37,-60,-65,-36,-42,-75,8,80,16,-103,49,-63,13,92,84,-56,-89,-122,25,72,30,33,-40,-127,-88,37,-4,-118,86,-94,-107,42, 
  /* [4][0][][] */ 24,76,11,26,-16,-11,22,6,29,33,23,9,9,-16,-12,-16,-27,-12,-37,1,63,-53,45,2,2,-8,26,-4,-26,30,-18,-16,33,58,0,-49,-26,-2,-37,9,7,-8,-42,-29,25,59,12,31,-2,-23,-12,-9,-20,28,-30,5,34,-70,21,15,24,-33,0,-10,-24,48,1,-8,20,-71,-54,-45,-29,12,69,70,38,-19,22,-16,14,-11,-52,127,7,43,48,2,-29,-18,38,13,18,54,-26,-3, 
  /* [5][0][][] */ 94,-92,71,63,49,-113,27,77,81,-85,-14,-78,28,96,43,41,52,78,-52,92,26,60,8,-41,-112,-51,1,-109,55,50,18,-107,-48,6,-67,30,-100,-40,58,44,-83,-93,-11,105,-29,11,38,-44,-127,88,35,46,36,31,49,-17,114,54,-61,-37,32,-54,49,-69,-24,94,-11,36,75,-21,102,-78,-34,83,-16,-78,4,-66,5,75,92,11,39,64,-76,81,-37,17,69,-78,120,80,-17,43,50,-77, 
  /* [6][0][][] */ 26,-50,111,79,-66,-38,-9,63,26,-69,5,-53,98,68,127,-109,63,27,-2,106,-49,-95,106,77,-67,-77,14,-58,-23,-106,42,-67,-72,-103,-33,-92,6,36,-109,81,79,48,25,-15,-87,124,-58,-29,-65,4,-4,-23,51,-36,96,-10,-3,6,-61,117,-83,18,76,-86,-32,68,102,-45,86,13,-72,5,65,-66,-101,-44,-65,-78,-51,-25,34,-27,36,-71,-64,-62,-19,-78,49,101,95,39,-55,-39,78,-39, 
  /* [7][0][][] */ 110,38,-34,-30,-58,121,-25,-8,127,14,-102,45,57,-67,46,57,66,26,-7,103,48,46,-4,94,-61,86,48,35,-71,76,-24,23,33,25,59,91,-78,69,-27,-25,61,-71,84,50,45,7,109,-88,61,-61,-82,-28,-33,67,16,35,98,-69,8,-47,1,0,65,-117,-53,-58,54,10,-94,40,71,67,81,20,25,30,-56,70,-98,38,75,-36,-21,-101,76,32,-82,83,27,9,68,77,-42,-18,-11,-70, 
  /* [8][0][][] */ 1,41,-49,-98,50,8,-71,-38,-11,24,42,64,-7,-52,-86,-79,-83,78,-75,4,21,-36,71,87,-119,75,26,84,-72,11,-94,108,79,-36,36,-10,91,-12,-29,59,82,87,-127,-110,-12,-44,-39,80,2,-81,-70,-29,-67,-7,-45,-107,35,87,-103,88,93,33,27,91,-40,-33,-31,89,-85,21,17,-7,55,46,6,15,-43,75,84,61,24,72,-127,-67,20,30,62,-57,46,-56,-87,79,-92,-111,-39,48, 
  /* [9][0][][] */ -19,52,98,35,72,-110,-45,-113,16,34,-9,36,-37,-87,-107,-20,1,-9,-105,-62,-11,71,-121,-94,127,-15,-20,56,-13,-56,-77,78,48,-13,9,-19,-51,7,-35,-51,49,-52,47,-81,56,10,-108,58,47,-34,-71,-23,77,-67,-69,75,83,-64,-3,-3,-78,90,80,-62,-79,13,90,44,-46,80,83,-90,0,71,-102,-68,-57,-97,-53,93,28,9,99,92,-54,-88,17,1,90,39,-30,92,94,3,66,-39, 
  /* [10][0][][] */ -52,56,91,-50,-7,84,107,43,49,47,3,-37,110,83,-21,11,-32,83,-77,-45,-16,45,53,-41,43,65,-96,-127,-29,64,-83,-97,92,96,125,86,-40,19,-40,19,-53,101,-60,-53,-99,-37,6,-50,15,5,40,-52,52,-12,-45,-21,-81,7,24,-62,-27,64,87,41,113,-98,-74,-21,12,1,-71,-67,96,82,-70,87,-19,96,59,35,80,-5,76,54,-83,67,93,-37,27,7,-2,-35,-24,-37,-76,-46, 
  /* [11][0][][] */ 98,31,-7,81,122,40,47,58,78,109,-77,87,5,-72,44,-39,-66,-65,86,42,43,75,25,-118,-91,-68,11,57,82,25,29,-21,-89,-52,50,65,-34,76,1,-21,-4,70,-127,31,-24,-50,-73,-57,29,86,120,72,-77,-55,35,24,-43,-43,-10,-80,-62,103,107,13,45,96,-24,49,97,28,-60,-56,54,108,-64,54,-44,0,-49,78,-99,-44,-46,-42,44,-56,-21,-46,-68,22,30,-102,-74,4,-44,-26, 
  /* [12][0][][] */ 11,57,-31,-15,63,20,-34,41,-43,41,-5,-9,-28,12,46,-44,-63,-14,-25,-61,35,-1,18,54,-75,-37,84,-56,73,35,-25,91,-77,-39,-31,11,13,-63,5,52,100,12,-127,-8,1,-50,-29,97,-49,-86,-49,112,33,29,-55,61,-18,-41,34,62,58,96,21,35,87,49,-18,93,58,50,31,52,65,71,0,5,-7,-9,-72,-62,-46,63,25,19,-20,31,31,98,-51,-54,79,19,53,3,18,54, 
  /* [13][0][][] */ 93,-74,78,89,77,98,67,43,73,-69,-11,18,85,65,57,-57,-92,-63,-61,25,50,-3,89,-22,-88,40,4,-11,-73,-127,63,14,51,83,-9,44,-68,-19,-10,36,-72,51,-8,-17,-51,8,11,-39,27,81,-16,-108,-90,-29,90,-56,-22,38,-10,-72,-49,85,-101,4,-45,-82,-85,50,-43,17,90,1,-58,29,-81,-61,-112,80,56,-57,46,-76,78,-14,-50,-106,85,46,-37,-78,-77,68,114,-32,55,-10, 
  /* [14][0][][] */ -62,-63,93,65,70,-43,-23,-106,-89,-55,68,57,-30,-72,-91,-65,-45,-90,-15,22,-49,20,5,57,-70,-76,-36,61,-91,-100,-73,14,86,-24,-33,-1,96,103,33,-113,-6,-88,43,81,53,-44,48,-51,38,34,63,76,95,-16,-32,10,-38,1,42,96,0,-83,-22,64,-80,-7,66,-88,-70,-86,-84,73,0,66,45,-48,72,-104,60,54,53,-23,-104,12,-91,-88,-95,127,104,15,90,-49,59,86,-28,57, 
  /* [15][0][][] */ 18,-33,-30,77,81,-71,67,-93,63,4,-79,34,93,9,-81,-102,80,15,-73,37,34,32,71,108,98,68,30,70,20,14,60,-99,20,-2,-42,5,-47,113,67,-72,-13,110,9,-42,7,-62,-23,-60,23,-59,17,1,-90,-127,-34,1,70,58,-23,81,-57,-73,-9,92,-25,52,-68,-14,-66,34,63,-62,15,13,32,-107,-15,96,90,81,-61,47,-56,-69,-91,-27,-64,10,48,58,-104,-19,70,91,-74,109, 
  /* [16][0][][] */ -55,-9,94,-57,49,117,-51,49,58,67,-107,83,-1,-38,-38,-54,112,90,77,64,107,87,-37,59,-43,59,-46,47,-87,24,38,8,-92,79,57,66,-19,45,-43,-51,18,-61,50,85,63,101,111,-4,-51,-110,20,127,-41,114,72,52,31,93,63,20,108,112,39,50,60,9,-24,89,46,97,-17,-10,39,88,57,71,-11,99,-106,-17,9,-87,56,-23,15,97,96,3,61,25,-11,116,71,-5,-84,20, 
  /* [17][0][][] */ 43,-116,40,102,-28,-85,-33,-97,54,-68,59,86,107,70,-99,45,43,57,100,127,-82,11,27,-14,53,80,-65,18,106,-77,-19,60,2,-14,47,30,-29,118,-91,-40,-111,-12,46,-21,5,22,95,-81,104,112,12,2,-17,21,106,-51,-85,103,-56,-118,22,-93,62,103,-63,-104,38,-96,-103,35,115,27,32,-75,-57,53,99,9,46,-24,36,0,-34,-93,-76,69,91,-49,1,65,-79,-69,33,93,19,38, 
  /* [18][0][][] */ -76,84,108,-52,1,-112,-104,10,17,85,-118,-14,-16,54,71,-60,19,-16,40,-11,103,-13,39,-58,16,-81,-2,88,26,39,-5,27,68,-16,-87,-95,-20,44,-39,79,-67,-20,2,-4,-95,17,45,-22,-7,-25,88,39,-112,-23,15,105,-41,51,1,-115,84,111,-7,25,-63,-127,-29,79,61,-47,-34,112,-78,-38,-82,-120,35,62,-4,-68,-48,-17,-24,-64,109,-51,105,30,-116,-63,-65,127,100,-39,47,-2, 
  /* [19][0][][] */ 2,71,64,33,55,-100,99,77,94,-68,35,-42,-107,20,-68,84,50,-115,97,56,-18,65,-48,1,109,-82,6,-32,-96,-123,-69,47,75,-92,25,-6,1,-74,-61,-121,54,-82,-81,11,-95,40,56,-97,-53,32,-47,38,-30,20,-6,-24,28,83,-1,-23,58,-73,119,69,-79,13,-41,4,-22,39,64,-50,-71,-124,-51,-64,-6,-127,32,110,60,-121,-27,101,-96,3,7,-1,105,41,-8,48,-36,111,78,-47, 
  /* [20][0][][] */ -3,66,72,103,-52,124,21,34,46,-8,-34,16,-1,76,38,-49,39,-29,-55,-8,43,-44,-41,-16,47,-58,-77,88,28,8,-5,127,81,47,-5,42,38,-17,-11,-91,-26,8,-34,-72,5,-2,-48,96,65,-81,-63,86,58,102,38,0,73,62,81,82,107,-34,-43,-17,1,-12,-38,19,-40,-15,-44,91,-52,-71,21,42,115,61,102,97,92,50,55,71,43,110,17,110,22,69,31,68,9,21,54,1, 
  /* [21][0][][] */ 100,89,65,-86,82,-87,73,18,10,-85,0,22,15,50,-25,-46,-116,-40,19,-18,114,-16,64,-95,40,-73,-32,61,11,4,2,25,6,23,-70,-72,62,89,-84,-49,19,17,34,9,-67,-42,-87,66,-53,-13,-18,41,42,39,-62,30,-23,39,-47,127,69,-75,-1,8,57,36,-26,-28,-91,-15,58,69,28,-1,124,76,-78,-51,86,114,28,101,17,-39,46,-76,60,-73,-50,65,104,-102,8,-48,62,-5, 
  /* [22][0][][] */ 20,38,-45,-48,82,-33,127,16,-64,56,12,-109,81,-60,-85,-39,9,55,-70,-26,82,-53,67,15,108,25,-109,113,-29,-41,-17,-45,54,59,33,39,-11,23,-22,-112,60,41,27,73,51,-68,65,-17,-42,-32,23,11,-15,-64,-32,22,49,-29,-1,-9,80,-73,-35,-24,-38,40,-76,-11,88,68,-15,26,-48,26,93,-18,47,-45,98,105,110,-41,-25,16,69,72,89,-41,40,28,-18,30,49,12,27,104, 
  /* [23][0][][] */ 27,-78,-13,29,75,-114,-9,-101,20,-84,63,40,-6,-117,-5,-49,56,-50,-115,71,62,-97,73,-49,-24,-30,55,31,50,34,52,-49,-51,17,-3,21,72,-29,-110,-5,-102,-16,-21,-109,-82,-110,79,9,46,-127,-93,-60,59,-65,-67,56,-82,-40,71,32,-108,-94,-66,-20,17,38,-116,-109,42,-43,76,-81,-24,-50,-46,-95,31,-38,70,89,-63,-66,2,-79,63,-9,76,-34,-85,24,76,-31,70,-55,-29,51, 
  /* [24][0][][] */ -54,-39,-80,-63,-52,-94,-41,-44,30,113,47,28,92,46,-23,-79,-80,47,38,-41,61,-48,-49,-38,48,-8,69,16,89,60,13,-56,-5,11,41,37,-31,-62,59,3,-53,-95,61,14,15,-45,35,57,-81,-36,-5,-6,53,54,69,-45,10,66,17,-2,61,7,36,82,-68,62,-19,-56,-77,22,-44,-31,-15,44,87,68,32,-58,-85,-65,-67,-91,-27,-127,12,48,-30,-102,24,-61,10,-60,-2,32,-101,33, 
  /* [25][0][][] */ -49,13,-35,12,65,-81,-36,23,19,-71,35,-23,44,16,-75,21,-77,17,19,-63,58,39,36,-51,42,-11,-87,46,40,-61,49,89,64,-48,32,48,28,-4,5,-42,-10,127,-28,12,78,53,33,14,-104,92,-52,-14,55,-11,-35,4,2,12,-41,47,75,10,32,66,1,61,-23,17,-58,-20,-17,-43,17,-34,84,53,51,-13,61,36,67,69,-23,99,-34,-9,-46,-52,58,-7,91,4,-62,-25,23,-1, 
  /* [26][0][][] */ 67,-123,2,16,-68,26,0,-31,-54,-95,90,115,-45,-18,21,-15,127,38,-72,-37,27,83,92,41,40,61,26,45,23,-25,-71,7,1,-37,-64,-74,-37,84,-64,84,-90,99,78,18,-55,84,-3,101,6,36,16,116,13,-49,6,-66,85,75,54,33,6,-68,48,-19,111,-23,-53,45,-60,103,97,94,82,-70,-98,7,45,-59,-79,22,-6,78,69,-84,81,12,-15,33,-97,88,13,51,-26,112,53,75, 
  /* [27][0][][] */ 12,97,-35,-74,-95,-79,-53,5,35,82,82,-127,-12,55,76,30,64,-21,54,-35,-61,3,9,-13,-82,47,-93,61,67,44,-5,19,49,76,-62,-70,-91,-38,-75,113,-52,90,33,76,110,51,58,104,6,70,42,-88,-22,-53,-10,-23,75,-9,-109,-38,66,-50,-32,86,51,-9,-78,118,59,9,-96,46,53,-44,28,-18,98,-111,98,107,104,1,114,76,-57,-69,-27,100,-4,4,-6,-39,40,20,112,61, 
  /* [28][0][][] */ 53,24,80,44,-53,-49,-37,-59,3,-81,98,4,-48,-29,9,65,29,39,-55,45,46,8,-34,-65,-15,47,-69,53,-33,-49,10,20,-56,20,47,72,0,-48,-20,-14,88,67,-22,25,-49,16,-3,28,-20,27,-37,26,-27,-1,22,10,86,-25,56,55,25,-45,-57,18,33,72,-18,59,-28,-3,-58,3,28,17,8,-20,-31,-75,63,80,12,-5,50,127,42,-63,45,-17,4,-41,-3,-52,33,57,16,-9, 
  /* [29][0][][] */ 45,51,51,-73,-82,-15,-106,49,58,12,-107,-116,95,-100,-40,-32,-126,87,50,-77,-86,-15,36,-25,-9,22,-37,-60,-85,32,98,-22,26,-8,-75,-29,-19,92,19,96,33,70,-42,87,-10,74,-65,-34,-9,-10,49,-127,63,-97,124,44,-61,48,-59,86,-115,89,-78,-27,-66,-74,72,93,78,-107,15,-93,115,91,90,14,84,-89,-34,30,-17,-102,25,-96,68,89,5,34,-16,115,75,57,-72,17,-47,74, 
  /* [30][0][][] */ 9,-62,-70,17,-100,11,-67,-13,93,-26,-8,-46,-113,-1,39,4,-19,26,75,-115,19,-105,-121,0,-108,9,-76,105,-16,-104,-94,-11,-94,-85,-127,-63,14,-31,-6,22,80,-80,-24,86,82,-60,86,51,-68,48,11,-100,85,-56,-23,83,-80,-62,-79,-61,-109,-12,-76,-30,-113,-93,-98,72,-70,90,27,-44,-96,92,32,-94,-70,-72,-79,-70,15,3,-103,-22,-107,15,-109,91,-37,-113,58,41,-45,-17,1,-86, 
  /* [31][0][][] */ 80,-116,30,108,51,37,-54,-97,-49,6,-104,-82,106,-108,-42,104,-71,-80,47,60,52,46,-29,114,78,-86,39,16,-76,-83,32,79,41,24,-87,13,98,-20,-80,-124,24,-50,-9,19,2,-65,-22,31,84,17,96,-65,-127,-92,-74,20,-97,62,12,88,-65,-13,92,-82,71,84,-43,-76,56,-98,-105,0,-86,-26,1,-10,-77,-15,33,96,-74,-42,82,45,39,105,-107,4,12,-30,-78,-45,40,119,-30,-19, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0021821449045091867, 0.0021719040814787149, 0.0023501976393163204, 0.0019130089785903692, 0.0035502628888934851, 0.0018635186133906245, 0.0019304356537759304, 0.0021246457472443581, 0.0019876149017363787, 0.0020423312671482563, 0.0019932971335947514, 0.0020272405818104744, 0.0026120697148144245, 0.0023312638513743877, 0.0020902343094348907, 0.0021753301844000816, 0.0019689775072038174, 0.0020732071716338396, 0.0018607485108077526, 0.0018296464113518596, 0.0023649414069950581, 0.0021895484533160925, 0.0026366144884377718, 0.0020632101222872734, 0.0024690397549420595, 0.0030570465605705976, 0.0021771902684122324, 0.0021642253268510103, 0.0032080607488751411, 0.0019753025844693184, 0.001900196191854775, 0.0018843217985704541, } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { 1209, 411, 3940, 5833, 4460, -1705, 3692, -1586, -2076, -746, 5832, -1914, 4084, 5408, 1974, 2775, -595, -457, -1698, 5189, 2345, -971, 2026, -601, -1008, 2966, 1297, 2159, 5091, 2677, 3693, 1077, 1538, 3636, 5870, 3282, -505, 2777, 2821, -3277, -75, 1566, -19, 1767, -888, 382, -1530, 982, -10714, 2502, 1135, -3544, 7070, -1064, 1796, 1183, 1061, 2029, -791, -2115, 894, 1272, 315, 4450, 5678, 3644, 3548, 5567, 4269, -1039, 2460, 4439, 3851, -1657, 5974, 7043, 1675, -6376, 908, 1276, 12174, 1806, -563, -1443, 1192, 535, 1544, -1941, 4166, -829, 3930, 798, -286, -3170, 163, 1423, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00014662955072708428, 0.00022885532234795392, 0.00014524937432724983, 0.00012517526920419186, 0.0001409800024703145, 0.00023403299564961344, 0.00014940922847017646, 0.00014983127766754478, 0.00018680488574318588, 0.00018753265612758696, 0.00011951557826250792, 0.00023679273726884276, 0.00013288053742144257, 0.00010737089178292081, 0.00014418475620914251, 0.0001416191371390596, 0.00022223385167308152, 0.00018217207980342209, 0.00015469355275854468, 0.00011165058094775304, 0.00019291797070764005, 0.00016280154522974044, 0.00016139140643645078, 0.00019670072651933879, 0.00026222082669846714, 0.00019865301146637648, 0.00014946756709832698, 0.00018831049965228885, 0.00015074678231030703, 0.00015018379781395197, 0.00013427154044620693, 0.00025685541913844645, 0.00019152041932102293, 0.00016680288536008447, 0.00011043743143090978, 0.00015545093629043549, 0.00016678222164046019, 0.00016016734298318624, 0.00012217502808198333, 0.00014891471073497087, 0.00017803419905249029, 0.00017097957606893033, 0.00018706155242398381, 0.00016316748224198818, 0.00022564924438484013, 0.00016147745191119611, 0.00016033285646699369, 0.00017657935677561909, 6.8481596827041358e-05, 0.00014004694821778685, 0.00018145739159081131, 0.00012370639888104051, 0.00011018237273674458, 0.00015008728951215744, 0.00018120570166502148, 0.00018143138731829822, 0.00016229590983130038, 0.0001955589686986059, 0.0001852527930168435, 0.00012541610340122133, 0.00018203596118837595, 0.00019837167928926647, 0.00020886883430648595, 0.00015894505486357957, 0.00012165489897597581, 0.00014063979324419051, 9.1269081167411059e-05, 0.0001308419305132702, 0.00015554505807813257, 0.0001352081453660503, 0.00014869267761241645, 0.00015616617747582495, 0.00012651842553168535, 0.00015471386723220348, 0.00013291557843331248, 0.00011438933142926544, 0.00011733576684491709, 0.00010668754839571193, 0.00016971128934528679, 0.00018012346117757261, 7.6824988354928792e-05, 0.00020928434969391674, 0.00014246116916183382, 0.00017255825514439493, 0.00016031728591769934, 0.00017120162374339998, 0.00014149089111015201, 0.0001861694036051631, 0.00014988532348070294, 0.00016980545478872955, 0.00015441658615600318, 0.00024108185607474297, 0.00021706508414354175, 0.00013599124213214964, 0.00022078784240875393, 0.00020385133393574506, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -21,83,-63,42,42,-19,76,74,-62,12,23,-66,50,127,-63,19, 
  /* [1][0][][] */ -35,25,-72,-27,-13,56,33,-127,40,-58,-40,-79,-12,-30,-69,5, 
  /* [2][0][][] */ -32,-30,45,78,16,35,-101,127,-31,10,81,-44,-33,-59,-52,80, 
  /* [3][0][][] */ 109,-123,83,-3,-13,-46,-31,127,-18,67,73,73,-15,64,15,16, 
  /* [4][0][][] */ -39,-8,-27,42,-99,23,-33,-127,2,-27,-1,-35,27,31,109,89, 
  /* [5][0][][] */ 127,8,-8,-28,-82,12,23,52,12,-6,80,97,108,18,-83,25, 
  /* [6][0][][] */ 37,-68,-29,-53,-75,-6,8,-48,-42,-28,3,35,100,78,127,-11, 
  /* [7][0][][] */ -72,59,-42,-98,9,-54,-74,-2,-101,61,-98,-67,-127,-39,16,107, 
  /* [8][0][][] */ 30,36,74,17,46,7,73,12,56,-19,32,17,-127,-18,-60,13, 
  /* [9][0][][] */ -54,82,20,-60,-30,-12,27,-28,-38,48,-58,13,58,127,21,27, 
  /* [10][0][][] */ 86,52,-58,65,-35,-5,45,-9,-64,-49,-56,-127,-119,-87,20,81, 
  /* [11][0][][] */ 60,-24,74,30,-24,-24,20,97,-77,21,-11,13,-32,-2,42,127, 
  /* [12][0][][] */ -80,-24,12,14,22,0,120,57,-99,37,-40,-5,-17,127,-41,116, 
  /* [13][0][][] */ 26,1,48,81,75,0,127,116,-64,92,-57,-29,-8,115,-105,-4, 
  /* [14][0][][] */ -113,127,36,-23,5,-1,78,-9,-44,35,124,-18,-83,12,-63,75, 
  /* [15][0][][] */ 6,-37,-127,-34,90,-59,-81,-36,-13,-33,-3,-84,-15,-99,-54,46, 
  /* [16][0][][] */ 109,-38,25,-1,16,-38,40,-27,-36,16,127,64,46,2,-33,26, 
  /* [17][0][][] */ -1,8,-28,-76,-19,-55,94,-127,1,-7,-46,47,40,69,18,43, 
  /* [18][0][][] */ 6,127,-16,-54,57,-64,-19,-51,-43,116,-45,-1,-12,50,-15,-14, 
  /* [19][0][][] */ -51,-127,122,-63,25,-100,37,-33,27,44,90,112,10,9,54,-10, 
  /* [20][0][][] */ -20,105,59,4,12,2,33,-22,63,-3,84,-29,-127,-20,-60,-8, 
  /* [21][0][][] */ -59,5,41,30,71,21,71,53,-127,82,-26,27,-19,46,-56,3, 
  /* [22][0][][] */ 2,-76,50,17,46,-127,116,18,-3,-47,-52,-60,30,-67,-61,-54, 
  /* [23][0][][] */ -40,-90,59,48,30,-23,26,-49,14,-31,79,12,14,56,60,127, 
  /* [24][0][][] */ 4,-18,27,91,52,-1,-38,-127,76,23,-22,25,14,12,-11,-28, 
  /* [25][0][][] */ -15,11,16,-31,-21,-12,15,-19,-30,53,-30,1,26,127,23,5, 
  /* [26][0][][] */ -72,87,9,8,27,-71,-14,-42,6,13,0,65,20,-8,-93,127, 
  /* [27][0][][] */ -20,-127,-40,14,-55,80,-3,-43,15,-22,39,-28,31,-28,-78,-21, 
  /* [28][0][][] */ -30,11,37,66,27,5,-29,-127,-108,49,102,-10,80,0,-47,-19, 
  /* [29][0][][] */ -127,112,-26,-33,-15,26,-106,-79,-44,-29,-14,-1,17,-47,-101,57, 
  /* [30][0][][] */ 48,87,-47,77,-117,-95,-98,-14,-48,8,-8,-94,127,54,-2,102, 
  /* [31][0][][] */ 127,38,-60,-43,-57,21,87,35,-33,-24,54,29,42,-7,-24,-3, 
  /* [32][0][][] */ -24,-47,127,19,-44,69,70,29,-13,-25,-10,20,0,93,83,35, 
  /* [33][0][][] */ -3,-1,-41,-14,-29,21,94,43,-21,-4,25,-40,52,127,-40,40, 
  /* [34][0][][] */ -75,-46,111,32,20,-72,127,-24,-123,44,64,-46,49,74,-45,-32, 
  /* [35][0][][] */ 10,17,-42,11,-72,112,-23,-37,-11,127,1,91,-68,69,23,37, 
  /* [36][0][][] */ -6,-83,127,-49,-46,23,-45,-8,20,7,-46,73,-3,-103,-38,39, 
  /* [37][0][][] */ 58,-28,78,-9,102,-77,-32,35,-62,127,-47,22,-92,-11,96,-11, 
  /* [38][0][][] */ 19,68,-15,-94,-4,-32,-123,77,-104,35,-127,-74,-82,-110,-108,41, 
  /* [39][0][][] */ -74,31,-51,-22,-84,-69,63,9,-127,-38,19,79,36,4,1,62, 
  /* [40][0][][] */ 127,49,20,-116,-62,30,48,-46,-21,-38,-50,-93,-6,39,-7,53, 
  /* [41][0][][] */ 89,-76,-65,-40,-1,-16,-45,-17,56,-14,8,-49,127,-71,71,-28, 
  /* [42][0][][] */ -9,-92,-17,127,14,-101,-84,30,-6,27,11,64,-67,102,-52,17, 
  /* [43][0][][] */ -101,-31,-43,-127,-48,2,-8,62,25,-109,-58,44,-5,-49,-28,94, 
  /* [44][0][][] */ -30,56,17,-49,-18,12,35,116,109,-81,73,65,127,28,-19,-16, 
  /* [45][0][][] */ 26,76,-67,83,127,-101,-30,-75,106,-66,56,-49,-30,-1,-68,68, 
  /* [46][0][][] */ -28,-45,20,-2,82,-22,36,19,-9,127,-28,-106,26,75,-43,69, 
  /* [47][0][][] */ 106,-37,-29,-13,88,-1,-40,-55,-1,125,-12,27,-18,-127,-92,15, 
  /* [48][0][][] */ 0,11,16,-127,-1,-50,106,-125,9,34,-29,66,69,72,3,34, 
  /* [49][0][][] */ -24,127,-88,29,58,-59,64,71,-2,24,45,-53,-53,69,124,-91, 
  /* [50][0][][] */ 6,35,-16,6,-127,5,-76,-65,59,85,22,40,-30,-25,3,41, 
  /* [51][0][][] */ 127,-55,-58,-23,-76,90,-110,-58,35,-5,-43,111,-29,-100,-9,72, 
  /* [52][0][][] */ -18,-42,28,72,-16,-96,-127,-17,-66,-81,-13,-79,17,-102,-6,98, 
  /* [53][0][][] */ 27,88,70,-127,1,98,94,-33,-6,-8,7,-28,86,-110,-8,72, 
  /* [54][0][][] */ 14,100,6,-8,-10,-76,-90,40,-1,-15,-40,127,69,86,14,65, 
  /* [55][0][][] */ -54,9,26,16,55,-7,107,80,-68,-17,9,4,127,32,-10,-9, 
  /* [56][0][][] */ 127,12,20,22,-53,89,-35,-74,-16,39,-60,8,-55,94,-13,37, 
  /* [57][0][][] */ -47,-43,-29,-19,-51,-91,62,-15,-127,-16,41,63,13,58,-1,52, 
  /* [58][0][][] */ 69,-68,77,17,6,-77,-16,-2,30,-21,-127,-18,16,-47,-45,62, 
  /* [59][0][][] */ 94,23,-105,97,5,32,97,-31,-84,-44,34,-127,-109,-51,29,112, 
  /* [60][0][][] */ 1,29,-21,23,-23,-28,-9,5,-33,-77,65,123,-42,-127,-28,-4, 
  /* [61][0][][] */ -40,28,75,-93,-54,44,6,82,-19,-76,35,65,81,-2,1,127, 
  /* [62][0][][] */ 66,34,-13,-127,-16,-3,15,-61,4,42,-35,55,31,-26,-77,-63, 
  /* [63][0][][] */ -18,-20,-6,-2,-62,-67,-52,24,-71,-1,-43,-25,127,9,49,-21, 
  /* [64][0][][] */ 15,27,-5,40,-72,-33,1,-72,42,127,44,-9,40,-58,-56,114, 
  /* [65][0][][] */ -24,32,-7,-26,-75,77,37,-40,69,-113,102,-71,85,54,-127,66, 
  /* [66][0][][] */ -112,98,-86,-121,49,-40,-127,-115,-105,113,104,15,-98,-81,12,96, 
  /* [67][0][][] */ -8,-18,-127,-125,68,79,16,-34,-37,-1,44,-16,31,34,12,64, 
  /* [68][0][][] */ 50,40,2,-63,-67,38,23,20,-71,79,127,-10,-3,-54,-127,11, 
  /* [69][0][][] */ 95,-109,80,-68,17,-127,-24,125,2,76,109,104,-18,69,-47,17, 
  /* [70][0][][] */ 54,-19,127,51,63,-37,122,9,6,25,-53,70,-79,63,-90,65, 
  /* [71][0][][] */ 24,19,121,-70,-127,-89,34,21,-26,-12,47,-108,-93,7,3,42, 
  /* [72][0][][] */ -71,-72,10,-127,78,-5,3,34,-76,8,-121,-2,52,102,-64,121, 
  /* [73][0][][] */ 16,30,50,-10,127,-67,-69,-4,-40,97,-119,23,-78,-41,113,-18, 
  /* [74][0][][] */ -96,26,-127,-46,38,-15,-43,32,-61,-19,-124,-44,-38,-39,-7,36, 
  /* [75][0][][] */ 89,-12,49,-54,32,-2,-127,-37,-12,-88,61,10,13,-21,-4,4, 
  /* [76][0][][] */ 8,-84,-32,120,78,104,121,-52,116,-114,81,127,51,-79,-52,26, 
  /* [77][0][][] */ -25,-26,122,-38,-5,-55,-34,-127,11,13,45,105,58,51,29,24, 
  /* [78][0][][] */ -49,1,-24,-28,-6,-56,14,-11,30,-38,-16,-109,-127,-81,-124,-66, 
  /* [79][0][][] */ -91,-96,-60,28,127,39,-20,-2,46,26,-20,63,-54,-83,-36,-31, 
  /* [80][0][][] */ -4,-123,12,127,-34,-18,-93,89,2,4,55,-16,-98,-19,-6,35, 
  /* [81][0][][] */ 105,62,-5,67,6,26,25,127,18,18,116,52,118,-8,35,-5, 
  /* [82][0][][] */ -54,8,16,-41,34,-127,-114,-89,0,81,-44,-31,-20,98,-69,-15, 
  /* [83][0][][] */ 96,-40,77,-21,-28,4,-127,-5,46,-114,6,-61,-45,7,-2,-28, 
  /* [84][0][][] */ 11,-70,-76,37,127,45,50,38,-102,18,-88,-39,49,-35,-74,15, 
  /* [85][0][][] */ -5,67,32,-51,73,-13,31,-127,97,-17,36,4,86,-62,11,14, 
  /* [86][0][][] */ 124,-33,127,66,-3,-57,85,55,-82,-74,-125,-61,27,25,-76,-1, 
  /* [87][0][][] */ -5,-8,31,-81,56,-26,-46,10,26,-28,96,-22,-79,-127,-31,40, 
  /* [88][0][][] */ -70,-41,47,-4,24,25,-70,-66,-3,19,-92,-127,-45,-52,-14,-15, 
  /* [89][0][][] */ -83,10,12,-73,38,-2,-127,10,94,36,-63,4,3,-93,-32,-20, 
  /* [90][0][][] */ -16,1,-25,-86,127,28,-45,37,44,49,26,-17,32,2,-74,-15, 
  /* [91][0][][] */ -25,-55,35,42,-40,-15,10,63,-37,-60,25,-37,-14,49,0,127, 
  /* [92][0][][] */ -8,27,17,11,-20,43,-65,42,-31,-6,65,8,-34,127,40,19, 
  /* [93][0][][] */ 1,46,-42,-48,54,69,-66,6,75,80,88,64,-127,41,-29,79, 
  /* [94][0][][] */ 48,90,97,1,-127,-60,25,-10,20,-30,36,-11,-64,-27,12,-12, 
  /* [95][0][][] */ -16,11,37,24,127,-23,-60,82,13,35,-45,96,-17,25,83,-47, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0018913672538474202, 0.0029519933741539717, 0.0018735644407570362, 0.0016146295238286257, 0.001818493939936161, 0.0030187799129635096, 0.0019272222416475415, 0.0019326661713421345, 0.0024095869157463312, 0.0024189744144678116, 0.0015416254755109549, 0.0030543776229023933, 0.0017140193376690149, 0.0013849717797711492, 0.0018598319729790092, 0.0018267382401973009, 0.0028665834106504917, 0.002349828602746129, 0.0019953844603151083, 0.0014401752268895507, 0.0024884392041712999, 0.002099968958646059, 0.0020817797631025314, 0.0025372328236699104, 0.0033823733683675528, 0.0025624153204262257, 0.0019279747502878308, 0.0024290077853947878, 0.0019444752251729369, 0.0019372133538126945, 0.0017319618491455913, 0.0033131653908640146, 0.0024704122915863991, 0.0021515821572393179, 0.0014245269121602178, 0.002005153801292181, 0.0021513155661523342, 0.0020659905858337879, 0.0015759295783936977, 0.0019208434969186783, 0.0022964542731642723, 0.0022054570727050304, 0.0024128975346684456, 0.0021046891342848539, 0.002910638228058815, 0.0020828896667808294, 0.0020681254100054502, 0.0022776883561164141, 0.00088334071915596724, 0.001806458574719727, 0.0023406099062412977, 0.0015956825809553266, 0.0014212368987500668, 0.0019359684083610773, 0.0023373633157461882, 0.0023402743972837925, 0.0020934469066560268, 0.0025225053541362286, 0.0023895665071904659, 0.0016177360666915774, 0.0023480728268623352, 0.0025587864220142365, 0.002694188617169857, 0.0020502242259681225, 0.0015692204469814897, 0.0018141056643798947, 0.0011772753205150366, 0.0016877234447747469, 0.0020063680130988359, 0.0017440430819988251, 0.001917979447171092, 0.0020143797155469656, 0.0016319548012688756, 0.0019956463947892189, 0.0017144713783636689, 0.0014755022712051868, 0.0015135081484913826, 0.0013761573936790228, 0.0021890974603593349, 0.0023234034888446331, 0.00099096167832612991, 0.0026995483785867691, 0.0018375994404777884, 0.0022258202079683542, 0.0020679247099906206, 0.0022083211224526167, 0.0018250839784741402, 0.0024013898801058531, 0.0019333632662892342, 0.0021903121378272772, 0.0019918119069188833, 0.0031097028404474258, 0.0027999116573482752, 0.0017541443230584264, 0.0028479313477873802, 0.0026294682174921036, } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { 9884, 11176, -7635, 5592, -4236, 14434, 3208, 8336, 19238, -10456, -8832, -2954, -16694, 3972, 2982, 5165, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 7.8836048487573862e-05, 0.00010627625306369737, 7.6296448241919279e-05, 7.7398130088113248e-05, 7.7984870586078614e-05, 7.8999939432833344e-05, 5.4921187256695703e-05, 5.1055467338301241e-05, 0.00010769696382340044, 7.9752542660571635e-05, 7.0941583544481546e-05, 8.1866797700058669e-05, 7.7232514740899205e-05, 0.00011663053737720475, 8.4209605120122433e-05, 0.00011068915046053007, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -105,34,56,-23,-86,-41,-75,-19,-16,12,-32,-4,16,18,46,-5,-4,-2,108,14,24,-38,127,45,41,22,4,39,-44,-89,-82,33,-63,-34,46,-11,29,36,-11,45,-10,-8,-73,38,-93,-53,2,111,-14,5,-66,-11,-14,34,17,-25,-85,14,-10,76,30,28,-16,2,-41,-72,-44,8,-23,-55,25,21,23,-21,-64,-55,-52,20,-55,20,-74,79,92,-37,5,36,11,61,16,-25,0,-53,-35,-18,-57,13, 
  /* [1][0][][] */ 39,22,48,-33,-26,-1,-6,38,-41,0,44,-53,14,7,-62,-64,-4,21,-58,30,4,-73,0,40,-42,-58,-16,-19,43,-115,111,-93,74,29,-44,39,20,51,4,-45,42,12,14,-41,24,86,-127,-44,-73,-43,48,-16,20,-57,-22,50,-16,-26,-24,16,-3,43,-20,-43,9,-13,-51,-14,3,-16,-65,-48,-52,-15,-5,-80,38,36,33,-82,-27,-13,-88,-44,24,-48,-24,10,-77,2,-76,69,34,32,-23,67, 
  /* [2][0][][] */ 86,-36,31,20,24,-91,50,-2,6,-28,-1,16,-89,-38,-5,-24,-73,-39,-37,27,19,-47,-26,35,24,-66,15,-23,-44,75,-78,127,-81,122,-12,14,-4,3,-18,3,-95,79,83,53,-71,-22,0,8,34,33,-83,-57,68,17,-24,64,24,-6,59,11,-20,72,-23,0,48,24,11,17,51,48,-35,-27,54,33,36,26,27,-75,79,101,91,23,-36,56,-74,28,17,83,0,15,-1,19,-30,50,3,23, 
  /* [3][0][][] */ -19,-12,-46,2,-8,-23,4,-88,-3,81,46,58,20,-20,-45,60,1,-50,21,8,8,127,48,-58,29,33,-21,-4,93,-38,66,6,-35,30,-8,-1,24,68,17,-4,-72,-29,-50,31,-57,9,24,0,-4,-62,-25,-17,47,-76,-32,-51,49,108,-28,-6,19,-35,-29,-6,19,33,-39,3,-35,7,4,-36,-17,-45,56,-11,-12,-3,-49,-30,-30,-16,-49,10,-6,-15,24,-10,17,22,42,-43,31,41,-72,46, 
  /* [4][0][][] */ 25,7,-25,21,31,34,-46,21,-48,91,115,-19,7,-11,-1,-65,15,13,-36,48,20,-48,58,68,-63,-6,-127,18,-44,-67,14,14,-61,-43,12,78,-3,37,11,32,-21,-33,52,-22,-1,-4,-25,48,-39,51,13,30,46,-14,-62,17,46,-13,9,-7,50,-13,16,13,-51,32,-34,38,-56,38,-50,27,25,-59,-42,-44,31,-63,10,8,-40,85,-61,12,-35,38,21,-51,45,13,25,1,-65,-35,48,14, 
  /* [5][0][][] */ -108,46,26,-7,33,-2,70,-53,-14,51,-46,-39,69,-19,5,-58,1,-43,61,24,-127,-36,-98,32,-81,-11,43,31,47,-111,-7,57,74,127,-24,64,-15,4,46,-39,-58,93,57,-81,-7,79,23,-1,-15,11,28,44,-27,-74,38,-77,75,-58,-79,-64,68,77,-52,9,117,-85,-90,-118,-68,-23,-59,47,12,24,-17,-49,43,-20,-77,-65,106,-34,24,-126,-101,49,43,-17,-38,48,27,-20,-30,41,-9,115, 
  /* [6][0][][] */ 44,-16,-96,29,-47,-127,83,66,-36,66,-8,66,-123,-78,54,75,14,-63,-17,-4,-3,-17,-32,-53,-11,46,68,14,25,36,81,-27,9,15,14,-68,21,18,15,81,-1,21,-66,-16,-30,-85,-78,22,55,-107,-65,61,48,29,-38,-58,69,59,6,2,-101,60,-72,-25,12,8,-14,51,39,31,-15,-29,-43,24,105,45,35,-30,40,-58,-13,-40,-61,68,-13,-43,52,25,-40,49,50,8,-39,22,-54,108, 
  /* [7][0][][] */ 46,71,-36,-41,-28,-46,26,-5,-61,4,-59,-87,-50,24,17,-1,-46,-39,-34,45,-10,117,20,37,-3,-11,7,28,38,71,66,-26,61,25,-20,7,11,-30,9,38,-59,-6,22,-33,28,-41,69,-24,53,-75,-105,-37,-27,21,-2,-19,-22,10,-106,-10,-3,127,40,-41,-29,2,-61,10,-44,-44,-116,13,5,79,-35,35,-40,38,29,-69,-12,-33,50,-67,48,-32,-15,-4,-33,52,-91,47,53,-25,-67,25, 
  /* [8][0][][] */ -23,87,-54,30,-75,-22,-92,31,-93,-10,-5,19,-31,29,53,97,1,-59,19,14,39,-3,6,-21,-45,62,-3,39,-1,-37,-47,-28,-22,-52,-8,-71,-40,34,42,-2,-8,-53,14,10,-48,-48,9,-3,-29,-50,52,88,-16,-23,-73,127,6,62,-6,-37,-42,-7,4,61,-36,-82,-34,-17,-46,25,19,45,-18,-63,-122,-19,-55,39,-81,-51,-55,-25,-38,-39,-4,3,23,25,25,74,-58,-40,-107,-123,30,-58, 
  /* [9][0][][] */ -13,21,-44,48,-2,-37,55,61,-6,34,1,100,-33,-23,7,127,20,25,73,20,17,7,41,-85,-8,5,39,-9,15,1,32,46,-36,10,1,-104,26,-6,-25,-9,-1,25,52,-4,-1,-3,26,20,34,86,10,0,-30,-68,10,-9,-28,-28,78,-20,-62,64,-42,-24,53,9,-14,36,-51,32,34,2,-20,75,-33,-24,-29,7,-21,21,63,2,68,13,22,-15,-21,-13,-47,26,6,17,66,7,-18,-7, 
  /* [10][0][][] */ 77,-7,-25,-8,-50,-49,51,9,31,-58,-35,1,-80,-19,-2,0,-72,-14,39,14,52,23,33,-3,-38,74,29,2,-50,-59,-40,-16,51,-25,47,-9,84,-82,80,127,7,-61,13,33,-26,-102,-11,87,26,91,-76,-39,-21,36,1,53,-12,-60,76,64,-30,76,-63,-13,-9,-65,8,50,37,-36,-10,34,121,19,7,-90,28,-48,46,-2,-44,61,44,38,-40,-22,10,42,-48,-12,43,40,55,64,-29,6, 
  /* [11][0][][] */ -34,-29,74,-38,34,-23,-36,-12,41,-50,25,14,1,-1,-15,4,-56,20,64,17,-38,-12,-53,-71,37,37,-17,40,26,-50,22,-46,14,4,2,-13,-49,27,-107,14,-45,54,-18,48,20,10,8,-13,18,9,-73,-60,6,16,67,-48,-40,-73,39,-29,-47,-25,-19,-96,-9,-47,64,94,127,36,75,-64,-14,-24,24,-39,94,2,20,79,50,43,-8,72,73,-6,-13,-3,-63,-44,23,43,81,19,80,54, 
  /* [12][0][][] */ 37,-14,23,-19,25,107,-1,63,27,58,-1,46,33,40,10,-5,-52,56,34,60,115,-20,40,-63,32,-3,-66,-60,-30,63,11,-16,42,-8,-2,-44,41,-10,-16,-22,7,-29,38,37,-12,54,-9,1,-75,15,25,17,-26,-49,13,24,-52,35,18,59,27,-70,2,-81,0,91,-4,-43,9,-29,56,-10,-2,12,-28,36,18,31,-63,-18,-17,34,127,21,-13,54,-29,-72,68,14,-71,63,71,0,20,-90, 
  /* [13][0][][] */ -9,25,0,-36,-7,-23,2,-27,-21,-32,4,-44,32,-99,-53,-41,-14,-45,-77,1,-89,-16,7,103,11,21,96,4,17,-8,38,30,14,-4,-99,98,-31,-24,36,-52,127,40,3,26,2,-88,82,-21,74,-25,-80,14,58,2,-6,52,36,-46,-26,-40,44,45,13,-94,-17,40,1,46,-68,-14,-54,-28,-74,52,-41,-86,-79,-3,53,113,31,68,14,-63,48,38,11,17,-27,-10,-17,52,-29,-2,-7,-15, 
  /* [14][0][][] */ -24,29,-86,-15,78,88,-83,-21,22,-10,76,2,13,-32,-31,-58,-59,4,26,127,6,-20,-6,4,16,43,-19,65,24,-10,-15,24,58,-10,-33,16,-10,63,59,-4,65,10,21,-3,-19,-55,63,-47,37,-31,-17,-10,67,10,-26,18,43,71,-90,-21,-5,-75,-22,-101,9,-39,-33,-1,-87,63,-18,51,0,-11,-6,-31,29,-14,-51,-17,26,-17,-6,-17,-13,58,-12,0,-21,58,61,14,-5,-29,-52,-71, 
  /* [15][0][][] */ -31,-42,56,-38,27,-32,-29,-65,-2,-20,-1,54,-12,-10,9,75,-87,3,14,-63,26,-28,-9,-54,45,-7,40,-49,-66,-86,-70,14,-30,45,49,-88,-9,-37,22,-9,-21,7,42,5,6,7,62,82,-47,29,4,-53,-23,48,10,-53,-127,-39,89,19,-49,53,-86,15,-57,4,-2,28,60,-73,70,-65,42,-34,-47,-29,18,9,54,16,5,101,50,40,-9,-33,-95,7,-24,-48,-59,48,59,-37,-9,55, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0033505321480333805, 0.004516740795224905, 0.0032425988465547562, 0.0032894203905016184, 0.0033143567852675915, 0.0033574975095689297, 0.0023341504856944084, 0.0021698572672903538, 0.004577120766043663, 0.0033894830849021673, 0.0030150171369314194, 0.0034793389495462179, 0.0032823819201439619, 0.0049567976966500282, 0.0035789080429822206, 0.0047042886726558208, } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 4253, -1092, -4296, -6019, -1221, -1379, 2024, -1462, 1367, -1442, 10447, -2020, -392, 9284, 4446, -5133, 16049, 2159, -9114, 30, -788, -3189, -899, -3040, 848, -7879, -2850, -2784, 612, -8892, -370, 10, 15677, 352, -3895, 268, 296, -1332, -266, 7740, 1524, -2507, -1740, -4583, 13539, 16149, 1412, 17136, 1462, 14316, 16744, -4176, -731, 449, 1193, 9217, -823, 702, 15127, 2939, 5090, 12608, 5627, -10828, -281, -4070, -4477, 2717, -6436, -1922, -154, 3678, 12474, 126, 656, 12633, -4900, 83, 7299, 1322, 858, 16357, -3468, -1461, 11106, 1056, -4725, -4078, 6080, -8278, 12555, -676, -3299, 2315, -4753, -5266, };
const TfArray<96, float> quant10_scale = { 96, { 0.00030483005684800446, 0.00022376012930180877, 0.00010293717787135392, 0.00011593819363042712, 0.00023812912695575505, 0.00031153319287113845, 0.00032895314507186413, 0.00023195639369077981, 0.00021740187366958708, 0.00015932995302136987, 0.00011315076699247584, 0.00026961782714352012, 0.00024663325166329741, 0.00012431156937964261, 0.00015268336574081331, 0.00017772804130800068, 0.00010035981540568173, 0.00034188793506473303, 0.00010283604933647439, 9.7920114058069885e-05, 0.00015381230332423002, 0.00026329810498282313, 0.00022973473824094981, 0.00017710738757159561, 0.0004875149461440742, 0.00011132278450531885, 0.00027983816107735038, 0.00014320666377898306, 0.00019370633526705205, 8.1630903878249228e-05, 0.00034751233761198819, 0.00021215800370555371, 0.00014288260717876256, 0.00017429163563065231, 0.00024887124891392887, 0.00037275324575603008, 0.00021673391165677458, 0.00034051109105348587, 0.00036254993756301701, 0.0001218176112161018, 0.00017916387878358364, 0.00022221244580578059, 0.00018816746887750924, 0.00013245783338788897, 9.8221644293516874e-05, 0.00010326378105673939, 0.000175417386344634, 0.00010255940287606791, 0.00018647861725185066, 0.00010103593376697972, 9.9859666079282761e-05, 0.00011800052016042173, 0.00013863726053386927, 0.00016985318507067859, 0.00021934807591605932, 0.00016005545330699533, 0.00019637568038888276, 0.00027615556609816849, 0.00012784711725544184, 0.00014830003783572465, 0.00016635667998343706, 0.00020421879889909178, 0.00011498313688207418, 8.7905442342162132e-05, 0.00020153660443611443, 0.00022932482534088194, 0.00019523686205502599, 0.00027298892382532358, 0.00020576280076056719, 0.0002064100990537554, 0.00021575107530225068, 0.00015560977044515312, 9.3230519269127399e-05, 0.00026739190798252821, 0.00023725607024971396, 9.3272305093705654e-05, 0.00011017526412615553, 0.00020826788386330009, 0.0001765422202879563, 0.00023502274416387081, 0.00025526591343805194, 0.00011348910629749298, 0.0002718423493206501, 0.00015696963237132877, 9.1035159130115062e-05, 0.00016319181304425001, 0.00011218733561690897, 0.00016962020890787244, 0.00015612243441864848, 0.00012763026461470872, 0.00010117944475496188, 0.00035564636345952749, 0.00025045062648132443, 0.00018544209888204932, 0.00013134689652360976, 0.0002346076798858121, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -3,60,45,47,-39,30,29,46,33,-86,-127,96,-43,26,104,-6,-127,10,34,30,39,73,71,76,17,-6,-55,-19,-7,12,21,36,-87,-7,-22,116,-7,30,-10,10,36,-29,39,23,-127,-45,22,-79,-38,-47,-46,-19,21,70,-28,-36,-66,-68,-87,-127,-96,-14,-127,3,-30,73,108,-13,-18,42,57,9,-41,18,24,32,59,-30,-108,38,11,-104,62,-10,-104,-58,25,48,-127,18,-127,39,73,-28,127,13, -53,-12,-13,114,-16,85,-32,8,30,11,-112,127,-52,-64,-110,127,-82,34,37,93,116,32,104,127,45,36,8,49,27,123,-7,-91,59,90,17,24,75,120,-20,-75,127,4,104,68,-28,-64,127,-69,-7,-127,-78,-40,30,127,-21,-127,45,12,-103,-68,28,-127,-51,71,-22,92,127,-7,28,127,127,13,-77,20,-52,-75,13,-7,-50,127,-33,-32,127,-55,-83,-64,127,114,88,100,-78,-6,127,-52,80,61, -4,-56,45,0,-46,11,-31,77,20,41,-46,59,-27,69,51,-33,-38,28,25,25,52,81,62,107,8,-2,34,34,-1,-12,-20,-69,-62,-95,-27,55,6,-3,-2,19,15,50,31,45,-58,-77,12,-60,46,-53,29,21,84,5,5,-1,59,-83,-57,-62,-127,10,-106,-22,54,50,23,-3,6,4,43,-1,-11,-41,-22,32,63,-1,-46,19,-7,-127,40,-7,-21,-47,-35,-7,-103,17,-61,40,48,28,74,7, 
  /* [0][1][][] */ 65,-15,52,102,4,-48,107,38,-48,-127,-70,115,-4,-127,-27,33,-83,-35,127,37,-127,-9,-127,-63,-20,114,-101,127,-103,92,127,86,-30,79,21,127,-127,50,-24,-42,59,-117,36,72,-105,-41,13,-127,-127,-98,-119,30,127,-62,70,-28,-127,2,-68,30,-30,-80,-13,87,-99,-25,88,-71,-45,43,-70,-127,-127,48,127,-104,127,61,-93,-63,127,-78,-12,125,-41,1,-4,73,-17,43,-52,31,-17,-112,94,-12, -127,12,-77,127,-67,-127,-127,-127,52,12,-40,30,-65,-102,-73,100,-119,-127,107,127,14,-127,-109,90,-127,127,16,48,-84,-19,-120,35,-127,91,127,-36,17,127,127,-91,-45,52,22,103,51,-19,-85,-98,11,-111,-88,83,38,34,52,-53,26,16,92,22,23,-26,-103,127,-2,-127,69,127,49,56,-122,-107,-53,43,-114,-127,107,127,127,-83,-89,-7,-67,110,-119,-99,120,127,74,122,-37,-127,-100,-84,46,127, 35,19,127,87,11,-17,6,50,-57,111,-46,102,24,18,-127,36,7,-30,56,2,-118,15,-71,-42,-17,90,127,-4,127,127,7,-127,-32,-127,-9,96,-114,-5,-35,-60,-24,127,38,127,-50,-12,5,-79,120,-91,-80,32,64,-96,-127,21,88,-8,-127,80,-77,-55,28,80,127,-36,-10,-30,-39,12,-22,-74,-123,-127,-2,-68,25,-31,-102,-48,-87,-56,-14,127,-127,11,-6,-3,-33,-6,-7,50,-9,127,52,-5, 
  /* [0][2][][] */ 16,-127,38,7,42,43,37,41,-55,-43,-46,-80,21,-61,71,49,-24,21,64,45,3,38,14,-30,-2,85,15,-11,-52,39,15,39,-68,-33,-9,-21,35,1,4,-50,-32,35,-25,-21,-84,-84,-37,-54,-61,-14,-61,50,-12,-30,-49,-21,-64,-6,7,43,3,-6,67,40,-42,60,-8,-26,52,20,23,66,-36,16,20,-12,-3,-30,12,1,16,-21,-11,2,40,42,-35,11,-96,127,-9,27,8,-7,21,8, -49,31,116,47,127,88,-37,-10,-127,20,-82,-7,127,-32,-48,-28,4,42,35,-49,43,16,75,27,51,-23,19,23,-19,90,-4,12,-71,7,30,-32,59,29,21,-127,-47,-1,-127,19,-65,-63,-95,-95,-24,-61,-127,127,114,-52,-55,-52,-13,127,0,23,115,-54,72,105,-35,75,35,-37,127,16,31,52,-24,29,-25,-84,27,-122,-75,-54,-9,-115,-25,-50,-7,127,73,-14,44,33,39,10,-26,-29,-2,21, 3,84,66,40,11,39,-16,40,-19,78,-14,-63,16,-31,44,56,-30,18,66,22,-17,45,-14,-46,-8,116,1,15,27,3,-27,-87,-60,-40,-2,-37,36,-39,-8,-63,-17,-9,-3,18,-118,-127,-32,-53,-6,-11,-30,18,-20,-22,-7,2,23,1,-3,73,-30,4,64,10,39,37,-31,-12,36,24,12,95,4,-7,0,-63,0,-19,21,-1,0,-71,-9,24,52,26,-40,-23,-116,102,18,22,9,-7,5,-3, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.012955277226865292, 0.0095098055899143219, 0.0043748300522565842, 0.0049273730255663395, 0.01012048777192831, 0.013240160420536995, 0.013980508781969547, 0.0098581463098526001, 0.009239579550921917, 0.0067715230397880077, 0.0048089073970913887, 0.01145875733345747, 0.010481913574039936, 0.0052832416258752346, 0.0064890431240200996, 0.0075534419156610966, 0.0042652920819818974, 0.014530236832797527, 0.0043705319985747337, 0.004161604680120945, 0.0065370230004191399, 0.011190169490873814, 0.009763726033270359, 0.0075270636007189751, 0.020719384774565697, 0.0047312183305621147, 0.011893121525645256, 0.0060862828977406025, 0.0082325190305709839, 0.0034693132620304823, 0.014769273810088634, 0.0090167149901390076, 0.0060725104995071888, 0.0074073942378163338, 0.010577027685940266, 0.0158420130610466, 0.0092111909762024879, 0.014471720904111862, 0.01540837250649929, 0.0051772482693195343, 0.0076144649647176266, 0.0094440290704369545, 0.0079971170052886009, 0.0056294579990208149, 0.004174419678747654, 0.0043887104839086533, 0.0074552390724420547, 0.0043587745167315006, 0.0079253409057855606, 0.0042940271086990833, 0.0042440355755388737, 0.0050150221213698387, 0.0058920835144817829, 0.007218759972602129, 0.0093222931027412415, 0.0068023568019270897, 0.0083459662273526192, 0.01173661183565855, 0.0054335021413862705, 0.0063027516007423401, 0.0070701586082577705, 0.0086792986840009689, 0.0048867831937968731, 0.0037359811831265688, 0.008565305732190609, 0.0097463047131896019, 0.0082975663244724274, 0.011602029204368591, 0.0087449187412858009, 0.0087724290788173676, 0.0091694202274084091, 0.0066134152002632618, 0.0039622969925403595, 0.011364156380295753, 0.010083382949233055, 0.0039640730246901512, 0.0046824486926198006, 0.0088513847440481186, 0.0075030443258583546, 0.009988466277718544, 0.010848801583051682, 0.0048232870176434517, 0.011553299613296986, 0.0066712093539535999, 0.003868994303047657, 0.0069356518797576427, 0.0047679618000984192, 0.0072088586166501045, 0.0066352034918963909, 0.0054242862388491631, 0.0043001263402402401, 0.015114970505237579, 0.010644150897860527, 0.0078812893480062485, 0.005582242738455534, 0.0099708260968327522, } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 5912, 2459, 542, -1477, 4975, 6905, 9680, 953, -54, 8551, 1367, -4987, 3894, 2059, 390, -379, 3331, 9256, -619, -193, 4230, 12093, 8650, -1201, -3363, -614, 10836, -38, 2413, 1072, 9255, -1518, 6924, 2669, 5455, -4651, 1012, -5465, 1049, 1855, 2286, 1355, 840, -803, 1737, 2125, 4119, 3280, 4348, 2421, 6469, 1819, -2422, 1444, 875, 1888, 2272, 2556, 5356, 1741, -948, 6962, 2175, 3873, 4995, 8379, -3570, 4066, 5671, -1699, 5332, 2588, 2061, 4085, 4545, 1629, -673, 2349, 2758, 4154, 3031, 3377, 4932, 904, 2713, 5692, 696, -1022, 10772, -310, 452, -822, 7749, 2249, -721, -821, };
const TfArray<96, float> quant12_scale = { 96, { 0.00013438246969599277, 0.00013920561468694359, 0.00020225124899297953, 0.00018731295131146908, 0.00014119241677690297, 0.00011390775762265548, 9.1634872660506517e-05, 0.00020291398686822504, 0.00017173614469356835, 8.9508757810108364e-05, 0.00018672483565751463, 0.00011604559404077008, 0.00014308960817288607, 0.00019571841403376311, 0.00019053075811825693, 0.00016671848425175995, 0.00017710686370264739, 8.4728395449928939e-05, 0.00013242257409729064, 0.00018101639579981565, 0.00014319532783702016, 7.4201598181389272e-05, 9.7000498499255627e-05, 0.00017786028911359608, 0.00015050527872517705, 0.00016694114310666919, 8.1879188655875623e-05, 0.00015830024494789541, 0.00011028325388906524, 0.00018133233243133873, 9.1971443907823414e-05, 0.00016123705427162349, 0.00011350575368851423, 0.00017760868649929762, 0.00012830912601202726, 0.00013622571714222431, 0.0001831614354159683, 0.00011362639634171501, 0.00013159327500034124, 0.00017293012933805585, 0.00020028486324008554, 0.00018133364210370928, 0.00020773803407792002, 0.00021557031141128391, 0.00017942713748198003, 0.00020647958444897085, 0.0001427190873073414, 0.00018632093269843608, 0.0001639804249862209, 0.0002177017304347828, 0.00012138907914049923, 0.00016832137771416456, 0.00015592107956763357, 0.00023571700148750097, 0.00022944112424738705, 0.00021664812811650336, 0.00016505792154930532, 0.00013745762407779694, 0.00014152143558021635, 0.00017382108489982784, 0.00019963702652603388, 0.00011768262629630044, 0.0001925911201396957, 0.00016256928211078048, 0.00012422299187164754, 0.00010034691513283178, 0.0001513103925390169, 0.0001309709477936849, 9.610744018573314e-05, 0.00016633623454254121, 0.00012484997569117695, 0.00010867272794712335, 0.00020641632727347314, 0.0001057425542967394, 0.0001336087443633005, 0.00011646010534605011, 0.00013780298468191177, 0.00016598994261585176, 0.00015418966358993202, 0.00013274179946165532, 0.00015806086594238877, 0.00013523831148631871, 0.00014560134150087833, 0.00018804929277393967, 0.00015860845451243222, 0.00010963821114273742, 0.00019708702166099101, 0.00022548282868228853, 8.2806458522100002e-05, 0.00021321194071788341, 0.00032321436447091401, 0.00013356863928493112, 0.00010409243986941874, 0.00017790358106140047, 0.00017311543342657387, 0.0001603271666681394, } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -81,60,4,-8,-47,-48,-57,-10,37,-43,31,-33,71,-100,26,-127, 
  /* [1][0][][] */ -106,38,-102,-113,-42,40,33,84,-22,0,121,-101,85,127,-6,41, 
  /* [2][0][][] */ -53,-7,-50,-42,0,-32,18,-60,-81,58,51,27,34,2,-47,127, 
  /* [3][0][][] */ -26,-80,2,-38,-74,3,-55,-127,-4,-2,49,-108,-55,1,-119,-44, 
  /* [4][0][][] */ 50,29,-60,56,-38,-27,-127,96,8,84,27,31,4,-10,-103,-89, 
  /* [5][0][][] */ -113,121,-127,-14,8,-48,-32,-68,44,-21,-10,-84,29,-120,-50,-104, 
  /* [6][0][][] */ -19,-36,-44,15,-91,92,37,-42,-24,-51,127,-4,10,-8,-115,-3, 
  /* [7][0][][] */ -50,57,127,-62,70,57,8,-20,46,34,-20,-29,61,25,-32,49, 
  /* [8][0][][] */ -65,-4,59,1,36,32,81,127,-57,14,-69,-81,64,99,-51,-66, 
  /* [9][0][][] */ -8,22,113,17,-120,-63,-127,-117,22,17,119,64,-48,-92,-13,29, 
  /* [10][0][][] */ -26,-94,29,-106,-113,100,40,24,-43,-64,-8,35,-42,44,-127,29, 
  /* [11][0][][] */ 127,-66,11,52,-68,-56,59,-21,119,117,-50,50,16,-66,-25,116, 
  /* [12][0][][] */ -59,-46,126,-25,48,-2,9,48,62,8,87,61,-27,46,-127,24, 
  /* [13][0][][] */ 25,-16,-23,19,-12,2,127,17,-89,-8,-20,-6,-4,95,85,-77, 
  /* [14][0][][] */ 127,-62,78,20,48,49,75,60,72,59,73,46,67,-43,79,-69, 
  /* [15][0][][] */ -28,127,33,-42,35,104,-57,72,-44,-20,-33,-6,-77,120,-23,-36, 
  /* [16][0][][] */ -42,61,107,-31,45,86,30,-1,5,0,-31,31,80,-23,127,120, 
  /* [17][0][][] */ 13,124,64,-127,53,-17,8,-15,-68,63,-48,16,-36,-47,89,-62, 
  /* [18][0][][] */ -79,1,-45,-111,127,86,-51,-87,44,94,120,52,-21,110,-21,5, 
  /* [19][0][][] */ 54,123,81,71,45,-43,-14,-2,-23,109,66,127,56,52,-51,30, 
  /* [20][0][][] */ 107,31,16,50,-74,8,-43,44,-53,-50,-127,-29,61,-30,13,4, 
  /* [21][0][][] */ -54,-88,-27,127,8,-5,-89,28,15,-27,16,-5,-81,63,-61,-18, 
  /* [22][0][][] */ 5,-29,-52,-20,127,-1,-29,26,76,47,61,59,-22,69,-16,31, 
  /* [23][0][][] */ -44,35,-46,12,33,63,102,85,-5,127,-17,-32,-4,37,-53,-36, 
  /* [24][0][][] */ 31,-105,86,-1,127,15,88,-44,69,94,75,76,-54,93,-9,-5, 
  /* [25][0][][] */ 88,-49,104,-10,24,-38,-30,61,79,13,-48,5,127,-37,68,60, 
  /* [26][0][][] */ 96,50,127,90,64,-26,-38,-37,18,88,28,103,53,-108,39,-67, 
  /* [27][0][][] */ -61,54,-70,36,-36,108,7,-37,16,-52,127,3,49,-26,97,98, 
  /* [28][0][][] */ -67,40,-88,-127,-9,-91,-46,-51,-113,102,-85,42,-51,-9,-69,94, 
  /* [29][0][][] */ 66,99,-81,59,15,79,-41,0,35,25,4,41,-127,4,-18,53, 
  /* [30][0][][] */ -41,91,-127,-35,78,-26,-5,37,-62,14,-51,14,7,84,19,94, 
  /* [31][0][][] */ -2,-85,102,55,75,-92,-127,75,-20,-10,-26,-70,-112,63,0,116, 
  /* [32][0][][] */ -35,62,11,48,-45,54,29,51,38,-127,19,-49,-4,38,58,30, 
  /* [33][0][][] */ -66,-12,50,114,-11,4,-44,15,-24,-77,24,-50,-16,-6,-8,127, 
  /* [34][0][][] */ -35,14,-73,-84,56,6,6,72,34,-10,-1,-19,-53,-29,-32,127, 
  /* [35][0][][] */ 94,-7,19,-7,-22,14,-83,-22,-16,-127,-52,25,-9,-45,57,-10, 
  /* [36][0][][] */ 0,29,-96,-32,19,127,-13,21,-50,1,48,49,32,21,-65,60, 
  /* [37][0][][] */ 39,26,53,-60,46,-127,22,-19,-104,70,-64,-12,6,13,79,43, 
  /* [38][0][][] */ -52,127,56,-62,44,5,59,-74,-6,-1,-63,69,-43,-94,-86,31, 
  /* [39][0][][] */ 84,34,-127,-111,-20,-60,-12,-67,17,-1,7,-62,58,10,-116,-74, 
  /* [40][0][][] */ -75,-2,-44,-67,-35,-13,2,-127,3,10,18,-15,51,74,40,101, 
  /* [41][0][][] */ -23,-64,-10,127,-24,-3,-67,12,-20,-39,56,-47,-85,9,-1,13, 
  /* [42][0][][] */ -6,67,19,-124,-12,41,21,-58,90,-20,-50,-12,127,11,-33,23, 
  /* [43][0][][] */ -23,41,29,26,97,4,30,56,-8,30,-22,-101,-127,-57,-8,-46, 
  /* [44][0][][] */ 117,-15,75,19,-16,-34,3,8,13,-25,13,2,127,48,-30,-18, 
  /* [45][0][][] */ 30,-73,-35,6,-9,-83,11,25,38,-13,-26,-2,-59,127,37,-58, 
  /* [46][0][][] */ -18,-86,61,69,-43,-12,-127,16,0,-37,58,-40,3,66,89,97, 
  /* [47][0][][] */ -32,-34,-4,64,4,0,30,11,-1,-72,-127,-31,39,-24,-73,6, 
  /* [48][0][][] */ -72,77,19,-22,-14,56,-34,-127,4,-28,46,-15,21,-88,-37,-2, 
  /* [49][0][][] */ -42,16,45,-47,0,16,127,106,-33,-30,-3,17,-16,49,-40,14, 
  /* [50][0][][] */ 20,31,-102,63,39,-108,-12,17,-64,44,-51,-21,-33,-101,-127,-42, 
  /* [51][0][][] */ -48,60,-32,100,-49,39,-46,-50,-34,-105,23,-107,10,32,-60,127, 
  /* [52][0][][] */ -122,21,17,0,22,49,49,-5,-12,-90,-44,-39,-107,-29,-127,-22, 
  /* [53][0][][] */ -36,-56,-53,-119,-60,17,-4,91,21,-78,-20,-17,-37,35,31,127, 
  /* [54][0][][] */ 4,-64,7,0,-55,54,50,-22,2,-82,30,9,-1,-10,-127,31, 
  /* [55][0][][] */ 1,-24,-22,20,36,-23,62,54,-38,-63,-127,-40,57,-33,-10,19, 
  /* [56][0][][] */ 58,-51,-41,-38,-127,-23,-121,-20,-18,5,-18,42,104,-45,18,76, 
  /* [57][0][][] */ -81,1,21,-45,127,13,54,68,-16,99,-14,-8,-35,49,-103,2, 
  /* [58][0][][] */ 20,5,-34,-7,25,6,-47,-51,50,-127,-62,-12,-73,-38,-43,41, 
  /* [59][0][][] */ -72,8,-35,7,15,63,-94,-57,48,127,-90,40,-25,12,-16,-12, 
  /* [60][0][][] */ 51,-59,21,28,-127,-75,40,7,5,60,-19,45,-1,-24,49,42, 
  /* [61][0][][] */ 9,26,-96,-4,-35,-44,-127,-34,-19,15,7,92,105,-84,81,27, 
  /* [62][0][][] */ 54,-21,73,6,-6,40,53,127,-35,86,23,55,26,79,88,30, 
  /* [63][0][][] */ 15,-123,-7,-32,-69,19,43,-42,-21,-22,-18,-15,-22,127,100,39, 
  /* [64][0][][] */ 19,-3,-127,-47,19,49,9,-3,-4,-118,56,-7,41,-19,-110,117, 
  /* [65][0][][] */ -64,-6,55,36,72,-69,53,109,-57,59,-127,-22,41,49,-75,31, 
  /* [66][0][][] */ -18,-95,-13,-96,-30,-127,59,-41,27,-1,13,54,-44,-15,-57,86, 
  /* [67][0][][] */ -56,-123,-82,-36,-57,122,-29,-107,-51,-13,-38,-127,73,8,-112,28, 
  /* [68][0][][] */ 127,36,14,-7,-108,1,-85,-70,-92,-113,-49,3,73,-82,98,-96, 
  /* [69][0][][] */ 37,-16,31,-4,-17,-58,-35,19,-5,127,1,12,20,31,90,-25, 
  /* [70][0][][] */ 45,-27,-5,62,-116,15,2,-96,115,127,55,61,32,-59,-34,60, 
  /* [71][0][][] */ 127,-99,107,123,-113,-13,51,-37,115,0,-48,46,41,-39,57,5, 
  /* [72][0][][] */ 21,-30,46,72,50,-17,-127,32,45,-18,39,27,-18,-45,-78,70, 
  /* [73][0][][] */ 80,15,59,-127,97,-109,-50,48,-10,104,-52,15,10,-86,33,-40, 
  /* [74][0][][] */ 97,24,42,49,-127,-72,45,12,-112,-53,8,-33,44,-82,23,23, 
  /* [75][0][][] */ 127,109,-102,37,76,64,-2,-58,-5,-47,90,69,-115,87,120,107, 
  /* [76][0][][] */ -86,-64,-43,-23,-110,-4,124,-9,-51,-5,112,54,-63,-127,-24,90, 
  /* [77][0][][] */ -76,100,5,20,-37,-127,29,92,70,-54,25,105,-34,62,2,92, 
  /* [78][0][][] */ 127,40,-58,27,-72,27,-105,-18,-4,-20,-88,-29,43,-78,30,37, 
  /* [79][0][][] */ -2,-39,127,18,-53,-85,-82,-75,-10,70,30,-22,-44,104,-31,79, 
  /* [80][0][][] */ 24,94,1,-127,-21,23,82,-24,34,19,-46,57,82,-57,20,-25, 
  /* [81][0][][] */ 61,-46,-22,-119,99,40,-29,127,115,26,-25,-75,1,22,-99,-92, 
  /* [82][0][][] */ 56,30,62,12,127,-79,41,55,12,70,-7,-7,-14,-4,7,-99, 
  /* [83][0][][] */ -36,70,18,41,48,34,127,69,2,38,-34,-72,-62,62,-23,-78, 
  /* [84][0][][] */ 4,-59,-8,76,-5,-119,-86,27,-85,66,-74,2,-127,35,34,-48, 
  /* [85][0][][] */ -127,73,-28,-26,25,-74,-19,-67,-4,100,-37,-105,-116,-82,-104,62, 
  /* [86][0][][] */ 9,70,78,110,26,-29,23,3,-19,10,-52,-66,21,92,-127,-62, 
  /* [87][0][][] */ -13,73,127,-42,-92,-14,13,13,23,-25,-5,59,-71,32,3,-3, 
  /* [88][0][][] */ -47,-53,-127,31,8,35,4,18,-33,-75,-81,-62,91,-20,9,53, 
  /* [89][0][][] */ 34,16,1,-110,0,-74,-43,64,127,0,46,-86,39,-20,80,-84, 
  /* [90][0][][] */ -9,50,42,7,-20,7,52,104,23,-55,-19,127,47,13,-56,88, 
  /* [91][0][][] */ -113,51,24,5,127,32,-58,-125,-92,80,-24,82,-113,-114,-67,57, 
  /* [92][0][][] */ -41,45,13,-29,-127,3,-63,74,-19,60,68,57,-29,-41,21,24, 
  /* [93][0][][] */ 73,36,86,53,-127,-73,17,39,-30,-48,-7,-65,13,-40,0,-4, 
  /* [94][0][][] */ -46,-119,46,-127,24,30,-27,12,102,-12,-15,59,36,62,-79,45, 
  /* [95][0][][] */ -49,-32,-6,-60,83,100,-25,36,87,66,-63,81,-65,127,-65,64, 
};
const TfArray<96, float> quant13_scale = { 96, { 0.0019164757104590535, 0.0019852602854371071, 0.0028843760956078768, 0.0026713358238339424, 0.0020135946106165648, 0.0016244786093011498, 0.0013068370753899217, 0.002893827622756362, 0.0024491895455867052, 0.0012765158899128437, 0.0026629485655575991, 0.0016549669671803713, 0.00204065116122365, 0.0027912091463804245, 0.0027172260452061892, 0.0023776309099048376, 0.0025257831439375877, 0.0012083414476364851, 0.0018885248573496938, 0.0025815383996814489, 0.0020421589724719524, 0.0010582150425761938, 0.001383358146995306, 0.0025365280453115702, 0.0021464086603373289, 0.0023808062542229891, 0.0011677078437060118, 0.0022575755137950182, 0.0015727882273495197, 0.0025860441382974386, 0.0013116371119394898, 0.0022994582541286945, 0.001618745387531817, 0.0025329398922622204, 0.0018298615468665957, 0.0019427627557888627, 0.0026121295522898436, 0.0016204660059884191, 0.0018766979919746518, 0.0024662173818796873, 0.0028563328087329865, 0.0025860627647489309, 0.0029626251198351383, 0.0030743239913135767, 0.002558873500674963, 0.0029446778353303671, 0.0020353670697659254, 0.0026571883354336023, 0.0023385824169963598, 0.003104720963165164, 0.001731172320432961, 0.0024004902224987745, 0.0022236453369259834, 0.0033616430591791868, 0.0032721403986215591, 0.0030896950047463179, 0.0023539490066468716, 0.0019603315740823746, 0.0020182868465781212, 0.0024789236485958099, 0.0028470938559621572, 0.0016783132450655103, 0.0027466097380965948, 0.0023184577003121376, 0.0017715877620503306, 0.0014310826081782579, 0.0021578907035291195, 0.00186782272066921, 0.0013706219615414739, 0.0023721794132143259, 0.0017805293900892138, 0.0015498199500143528, 0.002943775849416852, 0.0015080317389219999, 0.0019054412841796875, 0.001660878537222743, 0.0019652568735182285, 0.0023672408424317837, 0.0021989529486745596, 0.0018930773949250579, 0.0022541615180671215, 0.0019286811584606767, 0.0020764719229191542, 0.0026818369515240192, 0.0022619708906859159, 0.0015635890886187553, 0.0028107273392379284, 0.0032156899105757475, 0.0011809320421889424, 0.003040690440684557, 0.0046094735153019428, 0.0019048692192882299, 0.0014844988472759724, 0.0025371455121785402, 0.0024688600096851587, 0.0022864821366965771, } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -26906, 290, -2269, -15470, 14079, -14878, 26756, -8179, 7251, -7282, 15369, 16281, -2171, -29684, 4104, 5253, };
const TfArray<16, float> quant14_scale = { 16, { 9.5345589215867221e-05, 5.0412945711286739e-05, 6.2445666117127985e-05, 6.2505219830200076e-05, 9.8275238997302949e-05, 0.00014550602645613253, 5.667790537700057e-05, 7.6394593634176999e-05, 9.6959498478099704e-05, 0.00010565867705736309, 8.5028012108523399e-05, 8.5074883827473968e-05, 8.717276796232909e-05, 0.00011027159780496731, 8.1862795923370868e-05, 8.0512349086347967e-05, } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 0,37,12,11,-31,-91,22,-4,-29,-64,38,-16,63,-69,73,35,-94,-47,49,17,110,24,-68,29,-7,84,127,85,-11,67,81,-24,6,0,-17,-5,52,26,15,-48,94,11,41,-44,23,-9,4,-23,23,-28,90,-27,-66,7,16,8,-3,-54,9,56,5,48,-50,-21,15,10,57,29,-13,-40,38,25,-4,41,-10,33,62,-32,35,28,-14,55,33,43,-67,7,3,58,-9,19,-94,10,31,13,113,70, 
  /* [1][0][][] */ 64,16,-35,1,8,-12,93,-113,-86,-16,-102,-46,-31,-64,-22,-48,-25,19,-67,-40,-31,-96,112,-85,-4,4,0,67,-54,31,-77,16,-50,40,29,0,-49,46,-80,127,42,10,-12,-36,60,-73,-2,14,-74,-15,61,-101,-41,50,101,49,-1,34,-72,-13,-76,5,-13,-14,39,9,119,3,-54,-89,-32,-18,58,55,-16,23,-78,-15,106,-34,59,-29,79,-115,-33,-81,-29,4,0,-49,42,-17,54,-104,-30,63, 
  /* [2][0][][] */ -16,-18,-6,-16,82,54,-63,50,-88,62,30,-35,20,3,43,45,33,-28,-127,-15,-40,-54,8,54,9,1,-32,13,-32,-5,-6,83,-21,-42,2,10,-48,57,-3,-54,69,14,20,47,28,60,-16,9,-93,4,-5,2,-32,29,9,-51,52,-7,62,61,-35,-2,-31,63,33,0,-35,1,-12,-20,-12,-36,8,85,40,85,-52,-34,-15,-69,55,54,60,-23,-1,-59,3,-48,-41,-36,13,103,3,9,113,-40, 
  /* [3][0][][] */ 20,-35,-33,-94,-28,-39,104,-34,36,127,-57,3,11,-30,-7,71,58,25,-20,33,-49,9,3,15,-27,84,36,1,-54,-15,-43,58,9,-7,36,-30,5,-69,-7,59,20,17,-38,27,69,-49,-6,47,51,-32,29,-31,91,31,18,4,-6,-14,-10,-25,-23,43,73,-17,-19,-15,115,-57,-55,-17,-24,36,12,-52,7,-59,1,-43,119,18,-6,-47,-25,-15,-44,-43,67,68,-43,36,-69,24,28,-78,-22,48, 
  /* [4][0][][] */ -19,54,30,7,-30,29,-26,-24,28,-34,4,-11,-2,60,-46,13,-16,-27,-24,-76,26,-20,-64,12,-12,-31,-22,11,-50,127,-62,-16,13,-30,13,-31,59,48,-49,28,23,0,35,-36,-34,-19,44,-25,48,-18,-49,14,-61,17,25,9,-5,45,-7,-6,-29,-50,-12,2,36,4,-62,-20,5,15,6,-61,-18,48,72,63,-49,25,-54,61,33,64,46,-58,36,-72,-48,-70,-53,-51,-33,-13,8,-8,25,-20, 
  /* [5][0][][] */ 6,-14,57,-20,-27,-21,-11,-10,39,12,-8,1,-11,-30,29,-22,-8,11,-58,-25,-16,27,-30,-4,25,-36,56,-14,-10,25,7,77,-14,-71,25,20,-41,-33,-38,-11,-42,10,-9,22,-1,25,-50,19,-15,18,44,-9,25,-58,-1,7,-28,-45,4,-43,34,24,28,37,-26,19,106,-29,-1,-10,15,11,8,24,30,12,8,-2,127,32,-18,-18,-18,21,46,60,-13,87,8,-34,-17,2,7,-17,-27,18, 
  /* [6][0][][] */ 27,-67,58,6,-52,110,-59,-65,-28,-66,-84,56,-18,0,-12,90,19,61,7,-47,-111,-23,-81,-57,11,-46,4,52,-127,57,-25,-20,24,54,-8,-3,-7,-41,16,-34,-57,25,48,-35,37,43,-108,9,65,-19,-66,-104,66,-28,-30,-25,40,-46,27,0,4,-49,30,8,54,-77,-61,-84,-111,-2,-29,-64,-30,-95,3,-88,119,2,-66,27,-5,65,29,-115,66,-71,-13,-4,-81,67,-65,73,31,-64,73,-112, 
  /* [7][0][][] */ -1,-12,-70,50,-48,11,39,-18,-82,17,57,44,-10,-60,-25,-18,7,3,-6,1,-84,-42,-46,-46,56,38,6,43,-12,43,2,29,-46,-127,30,102,-21,-6,-75,10,11,15,14,-73,27,49,45,88,-3,63,-39,-12,23,-50,71,-42,-8,33,-45,-17,55,-11,8,-34,56,-51,94,-28,-68,0,65,11,-8,-36,-84,-22,38,-36,97,-44,4,-8,-67,-22,35,12,-44,59,-19,24,16,40,63,-5,75,-22, 
  /* [8][0][][] */ -20,-56,10,-8,-25,-13,34,-1,-15,-9,57,66,28,38,-46,-11,57,-24,32,31,9,-76,-29,-9,-16,-44,66,9,-31,33,32,-21,-1,11,4,14,-40,-17,32,-55,-9,51,62,-34,13,-10,32,-7,27,0,39,-6,3,19,-43,16,-11,120,-47,17,-15,-74,-61,-15,-89,-19,-12,23,-6,-4,52,-24,-46,-127,48,-111,21,7,-52,9,-37,12,-2,87,71,-57,-46,53,-67,102,9,-3,-44,-7,-14,-43, 
  /* [9][0][][] */ -37,-55,-62,54,34,53,-24,63,-51,2,53,74,-63,72,20,-40,-9,51,-18,-46,-6,21,4,-5,-22,29,16,27,54,9,8,20,-20,-26,21,41,-2,15,68,24,-25,-41,8,-21,35,34,-3,27,-47,12,5,55,111,-14,-28,-12,9,-38,26,22,-42,-8,80,18,0,4,43,-10,3,-2,-44,45,2,-125,-27,-127,-35,-29,24,-20,3,47,-6,-52,47,-2,-65,-1,-16,104,66,30,73,50,-7,33, 
  /* [10][0][][] */ 16,41,25,0,-11,17,-41,-17,58,-3,-40,19,25,19,-5,-58,-38,7,31,-6,34,-4,0,-35,12,-27,-98,51,-21,59,-8,17,20,19,-35,9,23,13,3,-27,32,-2,78,-67,-22,-7,23,23,6,12,11,-35,-33,-21,-1,15,-11,-13,-17,9,-10,-46,-12,10,-12,-26,-86,-34,-57,-38,48,-27,-28,38,23,19,66,-28,-88,4,-19,42,-14,-15,7,8,-63,-127,-29,23,20,16,65,-25,18,24, 
  /* [11][0][][] */ 16,-42,-1,12,-27,42,-4,18,53,-19,-30,-43,14,14,6,-12,-16,49,24,-63,2,17,22,-22,31,15,69,1,43,-45,-46,31,10,78,-98,-3,22,4,60,10,-58,39,-9,-4,-35,3,-8,-18,43,-6,-10,-20,-27,-7,-52,65,-19,-22,-11,-20,18,-11,-16,-56,-12,-49,-127,-61,-12,-39,-92,16,43,18,-13,-2,38,41,-105,-43,-14,2,-25,-13,-16,-19,59,77,24,-41,21,0,-38,35,73,-2, 
  /* [12][0][][] */ 32,31,-46,-24,24,-11,-1,35,50,-48,24,1,0,-19,-7,7,16,-47,-41,8,29,48,-15,25,-38,-53,-127,-9,57,-32,21,1,-23,-80,58,13,29,-18,19,18,-3,-75,20,41,37,-8,23,-29,-68,15,-40,103,98,-5,52,-73,-2,38,-48,-34,1,24,91,22,-9,-10,2,31,122,27,-1,31,20,-19,-14,-9,-19,-54,23,-68,14,-46,23,-32,3,17,13,-112,-16,50,-44,5,6,56,3,36, 
  /* [13][0][][] */ -12,18,-76,-4,25,23,-21,40,31,59,-57,52,-43,-11,56,-35,24,13,69,17,-23,-57,11,35,45,30,-14,17,-2,34,68,-20,-8,42,-11,52,-1,-31,-53,-75,15,-6,31,23,36,37,-39,52,-40,67,14,-6,-3,-55,71,43,5,-44,9,14,53,-3,-8,-11,12,88,127,32,14,-1,-43,-11,40,48,-84,50,50,-79,121,-42,-18,-15,3,31,15,39,-10,-16,-31,-12,24,60,38,25,35,57, 
  /* [14][0][][] */ -29,69,15,21,-75,-48,19,41,-66,-19,79,38,-81,-21,93,-1,-35,36,-62,49,-19,15,-124,5,-32,0,-65,-123,-1,4,43,89,-62,21,11,-9,-14,-87,20,-60,36,-43,20,-31,0,59,-91,43,-8,-25,98,36,14,34,-25,34,-71,28,6,55,56,60,13,43,24,-40,-20,-78,34,81,87,45,-44,38,20,3,30,-4,12,28,-77,123,-11,-117,64,-21,-2,5,-127,-1,-18,20,-19,-3,32,42, 
  /* [15][0][][] */ 79,-32,24,14,64,7,-15,11,15,26,-74,-34,69,75,-15,-22,-4,4,-80,41,-3,-18,34,26,41,-41,105,22,59,-23,-67,63,54,39,-20,-85,61,88,46,54,84,43,-8,-6,-55,-127,47,-34,-42,-5,-16,-27,-22,-60,-18,46,-1,-5,-26,4,2,-66,-59,48,32,41,-76,70,-8,-60,-16,-13,-15,-126,-56,-100,-4,22,-114,10,76,-34,29,25,-51,-3,10,-3,60,84,36,-78,-39,-20,39,-65, 
};
const TfArray<16, float> quant15_scale = { 16, { 0.0040521873161196709, 0.002142550190910697, 0.0026539408136159182, 0.0026564719155430794, 0.0041766976937651634, 0.0061840061098337173, 0.0024088108912110329, 0.0032467702403664589, 0.0041207787580788136, 0.0044904937967658043, 0.0036136903800070286, 0.0036156824789941311, 0.0037048424128443003, 0.0046865427866578102, 0.0034791687503457069, 0.0034217748325318098, } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 10266, -639, -12525, 5386, 150, -292, -26, -312, 1903, -4437, -1051, -181, 10160, -5012, -3447, -8067, -524, -675, -11608, 3831, -1514, 6645, -4724, -1691, 11, 4927, -12178, -6723, 1224, -3197, -530, 1341, 19327, -2200, 2206, 1587, -769, 14566, -1087, 14467, 408, 5300, -2662, 4201, 3697, 810, 13468, 4595, -8448, -474, -4920, -955, -927, -3970, 2828, 1201, 488, 5037, 965, 706, -1300, 917, -615, 9117, 18502, 73, 17428, 8917, -317, -1385, 18605, 89, 834, 313, -5123, -1113, 23079, 12277, 10317, 7917, 15150, -3563, 8646, 10603, -399, -344, 12032, -5173, 16561, -1986, -7545, -616, -1557, 436, 11003, -678, };
const TfArray<96, float> quant16_scale = { 96, { 9.1207788500469178e-05, 0.00029124069260433316, 9.3260685389395803e-05, 0.00016181026876438409, 0.00028269703034311533, 0.00074657652294263244, 0.00011659051233436912, 0.00023247573699336499, 0.00041713760583661497, 0.00025093695148825645, 0.00030523570603691041, 0.00022024604550097138, 0.0001053755113389343, 0.00013372884131968021, 0.00024801044492051005, 0.00013982283417135477, 0.00028641155222430825, 0.00034214419429190457, 0.00012747950677294284, 0.00025478043244220316, 0.0002725306258071214, 0.00016385741764679551, 0.00014242307224776596, 0.0001498606288805604, 0.0026204378809779882, 0.00019675630028359592, 0.00016847593360580504, 0.00012751978647429496, 0.00043907732469961047, 0.00015433914086315781, 0.00016707487520761788, 0.00036086345789954066, 5.538158438866958e-05, 0.00034297109232284129, 0.00017166185716632754, 0.00020412445883266628, 0.00034668020089156926, 9.4994786195456982e-05, 0.00022573793830815703, 0.00010855737491510808, 0.00050988601287826896, 0.00018856282986234874, 0.00018980426830239594, 0.00019986150437034667, 0.00019389679073356092, 0.00029379493207670748, 0.000108963722595945, 0.00030124900513328612, 0.00011886190623044968, 0.00057074136566370726, 0.00022320600692182779, 0.00019406847422942519, 0.00014277816808316857, 0.00026187300682067871, 0.00025721557904034853, 0.00025089390692301095, 0.00017630503862164915, 0.00035548012237995863, 0.00031279594986699522, 0.00034186194534413517, 0.00031744243460707366, 0.00030572884134016931, 0.00017559809202793986, 0.00010709535126807168, 0.00012725788110401481, 0.00045161379966884851, 0.0001056426262948662, 0.00019490167323965579, 0.00023203891760203987, 0.00035644529270939529, 6.8713445216417313e-05, 0.00033064413582906127, 0.00044721865560859442, 0.00017103648860938847, 0.00012105760833946988, 0.0001935892942128703, 6.534784915857017e-05, 0.00010973771713906899, 0.00013551053416449577, 0.00017080552061088383, 7.4838688306044787e-05, 0.00019941621576435864, 8.2043021393474191e-05, 0.00024572564871050417, 9.9114076874684542e-05, 0.00038325542118400335, 0.00010512615699553862, 0.00026520612300373614, 8.2798775110859424e-05, 0.00020740140462294221, 0.00012428659829311073, 0.00023321477056015283, 0.00035393485450185835, 0.00016904943913687021, 0.00013652695633936673, 0.00031779624987393618, } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -37,-5,60,8,81,8,51,-21,-5,6,-12,-52,-13,25,-8,-25,-10,19,42,0,-4,3,-12,62,-9,13,-24,21,9,25,55,-19,-36,11,-12,-56,3,-125,-4,-82,-3,-39,43,-41,-38,27,-90,-26,-6,5,-11,60,-75,22,11,-7,-10,-24,3,-11,-7,-26,-10,-43,-31,-9,-50,-28,-32,32,-127,-9,37,1,-5,-6,-19,-20,127,-93,-117,29,-86,-43,-32,-27,32,-3,-120,0,46,-56,12,69,31,-2, -19,55,107,-52,-20,-4,127,-68,-5,2,-34,4,-39,13,-80,88,-6,74,51,-41,-8,127,56,122,16,44,67,100,115,70,127,-52,-120,-6,-98,-46,-12,-62,127,-83,-28,-127,12,-42,58,-30,-81,-4,56,5,19,127,-89,112,-96,-5,-88,-9,-6,37,-10,-127,-127,-14,-98,9,-9,-57,-18,19,-114,99,-127,-22,36,-22,-79,-127,-6,-127,-120,22,30,-77,127,71,-40,25,-116,6,99,-10,18,127,-18,-95, -10,3,49,37,80,11,78,-45,-22,23,-16,-2,-1,27,-5,-5,-7,15,19,-22,4,-8,-4,63,-16,11,4,-9,19,24,44,-16,-65,12,-23,61,5,-119,0,-32,0,36,54,-32,-22,-43,-87,-34,16,-8,-4,58,17,31,-2,-8,68,-30,2,-11,-7,-10,-64,-14,-69,-22,127,-43,-24,26,-113,11,27,-10,14,19,-43,44,-51,-34,-100,30,-118,-45,1,-37,-1,-30,-84,-30,27,56,-2,36,32,9, 
  /* [0][1][][] */ -79,-9,63,-46,20,62,-65,6,-3,-13,-19,-46,-127,25,27,71,-15,40,127,17,45,-42,99,-22,32,7,81,13,-29,12,-18,-26,-127,-6,50,-40,-11,-127,-52,-127,-25,-23,99,-18,-95,127,-91,-88,93,81,21,-44,-103,77,74,-19,18,-50,28,-1,13,-15,78,-83,-77,6,-29,-51,-9,4,-101,6,53,127,20,-61,-115,-40,-82,-13,-63,2,-12,-63,46,21,-120,38,-127,127,99,-101,127,-3,-41,-2, 89,127,127,127,-127,-127,103,-50,127,127,-61,-65,-108,127,-9,127,127,-127,76,127,127,-113,127,-127,-127,-127,127,127,-127,127,-52,127,-114,127,110,-100,127,107,-4,85,127,-4,-127,-80,127,-18,127,127,127,-127,127,-115,124,127,-127,127,-127,127,-127,127,-89,117,104,-127,127,127,-22,127,-108,-127,9,-127,-8,122,127,90,124,-97,107,-66,63,127,116,127,124,75,-127,127,-13,56,-33,-8,-65,-39,-127,-29, -127,-40,65,-33,-6,51,-78,5,-33,-6,2,127,-116,31,28,49,-17,45,85,3,28,-49,84,6,35,8,43,-12,-13,-11,5,-12,-110,-22,75,127,5,-62,-58,-80,-30,12,41,-16,-89,-74,-74,-115,94,87,8,-20,127,7,96,-44,101,-44,44,-25,7,-31,-105,-49,-124,-12,-70,-71,-22,1,-106,-2,9,-86,42,127,-93,-27,-59,24,-127,-8,-84,-75,-19,33,-114,46,-48,-66,127,127,-29,-39,-69,-8, 
  /* [0][2][][] */ -60,-37,66,-59,36,14,-26,31,-11,10,29,-34,28,17,2,-9,-9,-6,4,-61,-8,-44,0,-19,2,-13,6,16,10,-9,-23,-3,31,8,-21,-32,-16,-40,2,-86,-36,3,54,24,10,16,-73,-16,-17,6,-8,-34,-9,-14,5,-4,-15,-24,-4,-17,11,16,-10,-53,-57,-43,121,-9,56,30,-26,-12,-13,-8,-19,-27,-81,-42,-47,-8,-51,32,-101,-12,-14,-18,18,-28,-47,13,-43,-37,-8,-13,-30,1, -78,-69,93,-99,-60,1,54,127,-59,66,127,-31,-32,25,127,118,-6,-35,85,-90,-65,-67,62,11,19,-16,51,33,-13,-17,-97,-46,-52,-22,-127,-2,-84,-95,72,-109,-20,-83,-12,127,3,-20,-73,-7,7,-5,4,-1,40,54,-77,-39,-54,-54,45,-56,127,30,107,-11,-114,-54,-38,-35,127,39,-127,8,10,-21,30,-19,-126,-73,-3,96,-59,3,-94,-62,104,-127,-23,2,-72,11,35,10,14,-114,-18,127, -64,4,55,-33,38,10,-25,17,-25,10,21,43,26,18,2,-10,-10,11,19,-57,-33,-46,-22,20,1,1,-3,-4,6,-15,-15,6,-17,12,-27,-4,-1,-67,5,-78,-35,-38,30,24,-12,-19,-95,-6,-34,3,7,-14,-8,-26,0,0,68,-13,8,-21,20,16,14,-27,-22,-33,-46,-25,28,16,-46,-10,-88,-41,12,-14,-127,-54,94,28,-52,-5,-127,-21,-56,-1,8,13,-86,9,-41,19,-4,-17,-16,-14, 
};
const TfArray<96, float> quant17_scale = { 96, { 0.0038763307966291904, 0.012377728708088398, 0.0039635789580643177, 0.0068769361823797226, 0.012014623731374741, 0.031729500740766525, 0.0049550966359674931, 0.0098802186548709869, 0.017728347331285477, 0.010664820671081543, 0.012972517870366573, 0.0093604568392038345, 0.0044784592464566231, 0.0056834756396710873, 0.01054044347256422, 0.0059424703940749168, 0.012172490358352661, 0.014541127718985081, 0.0054178787395358086, 0.010828168131411076, 0.011582551524043083, 0.0069639403373003006, 0.0060529806651175022, 0.006369076669216156, 0.11136860400438309, 0.0083621423691511154, 0.0071602272801101208, 0.0054195905104279518, 0.018660785630345345, 0.0065594133920967579, 0.0071006817743182182, 0.015336696989834309, 0.002353717340156436, 0.014576271176338196, 0.007295629009604454, 0.0086752893403172493, 0.014733908697962761, 0.004037278238683939, 0.0095938621088862419, 0.0046136882156133652, 0.021670155227184296, 0.0080139199271798134, 0.0080666812136769295, 0.0084941135719418526, 0.008240613155066967, 0.012486284598708153, 0.0046309581957757473, 0.012803082354366779, 0.0050516310147941113, 0.024256506934762001, 0.0094862552359700203, 0.0082479100674390793, 0.0060680722817778587, 0.011129602789878845, 0.010931661352515221, 0.010662990622222424, 0.0074929641559720039, 0.015107904560863972, 0.013293827883899212, 0.014529132284224033, 0.013491302728652954, 0.012993475422263145, 0.007462918758392334, 0.0045515522360801697, 0.0054084598086774349, 0.019193585962057114, 0.0044898116029798985, 0.008283320814371109, 0.009861653670668602, 0.01514892466366291, 0.0029203214216977358, 0.014052375219762325, 0.019006792455911636, 0.0072690504603087902, 0.0051449481397867203, 0.0082275448366999626, 0.0027772835455834866, 0.0046638529747724533, 0.0057591977529227734, 0.0072592347860336304, 0.003180644242092967, 0.008475189097225666, 0.0034868284128606319, 0.010443340055644512, 0.0042123482562601566, 0.016288354992866516, 0.0044678617268800735, 0.011271259747445583, 0.0035189478658139706, 0.008814559318125248, 0.0052821803838014603, 0.009911627508699894, 0.015042230486869812, 0.0071846009232103825, 0.0058023952879011631, 0.01350634079426527, } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 721, 5862, -73, 1267, 3722, 15374, 423, 2538, 14547, -1315, 11987, 4121, 1937, 514, 3726, 251, 3418, 4048, -178, 10839, 1141, 8821, -1144, 1468, -8105, 1130, 2575, 1893, 6661, 867, 2288, 3697, 1287, 11419, 4513, 2992, 3849, 1575, 2450, 2116, 12889, 1325, 1153, 1682, 3253, 14339, 4315, 7299, 1119, -1088, 2095, 5293, 2709, -3029, 6700, 197, 2102, 13075, 591, 1008, 2070, 15332, 3913, -103, 13645, 11683, 1442, 3111, 4913, 2792, 1834, 2267, -3412, 4212, 1822, 3041, 487, 5588, 3500, 5317, 4218, 1096, 4198, 10808, -457, 8336, 4828, 1533, -686, 2382, 1016, 12007, 3420, 3190, 4614, 5984, };
const TfArray<96, float> quant18_scale = { 96, { 0.00032290301169268787, 0.00012757671356666833, 0.00030447615426965058, 0.00025736665702424943, 0.00018029184138868004, 6.0803700762335211e-05, 0.00025141818332485855, 0.00015519734006375074, 6.0942762502236292e-05, 0.00015988326049409807, 6.9905232521705329e-05, 0.00014584464952349663, 0.00020288150699343532, 0.00040337481186725199, 0.00015763851115480065, 0.0002081254351651296, 0.00016813019465189427, 0.00016181866521947086, 0.00024417642271146178, 8.6149848357308656e-05, 0.00022237018856685609, 9.6187628514599055e-05, 0.00022016465663909912, 0.00018814978830050677, 9.1318237537052482e-05, 0.00020050261809956282, 0.00020032268366776407, 0.00021626765374094248, 0.00014148639456834644, 0.00029389714472927153, 0.00021022568398620933, 0.00012640541535802186, 0.00025493683642707765, 7.6181648182682693e-05, 0.00013542584201786667, 0.00020684849005192518, 0.00015596678713336587, 0.00023883311951067299, 0.00016699370462447405, 0.00018251745495945215, 7.338427531067282e-05, 0.00021702883532270789, 0.00021005909366067499, 0.00016099803906399757, 0.00015000146231614053, 6.5130858274642378e-05, 0.00016124018293339759, 0.00011767603427870199, 0.00022683154384139925, 0.00019366911146789789, 0.00022391238599084318, 0.00013738947745878249, 0.00019740253628697246, 0.00014247612853068858, 0.0001148383307736367, 0.00044394290307536721, 0.00015742257528472692, 6.7272827436681837e-05, 0.0002355632750550285, 0.00021729285072069615, 0.000183080745046027, 6.0074507928220555e-05, 0.00015810900367796421, 0.00028742564609274268, 6.7164110078010708e-05, 7.713418744970113e-05, 0.00026795302983373404, 0.00018977322906721383, 0.00015123971388675272, 0.00015152740525081754, 0.00022640210227109492, 0.00011808738054241985, 0.00014489698514807969, 0.00015531954704783857, 0.0002363537932978943, 0.00021312458557076752, 0.00023018071078695357, 0.00012781974510289729, 0.0001774150732671842, 0.00016139762010425329, 0.00011996332614216954, 0.00012033965322189033, 9.9252087238710374e-05, 8.2929713244084269e-05, 0.00014300049224402755, 8.6275656940415502e-05, 0.00014112592907622457, 0.00027324139955453575, 0.00020575181406456977, 0.00023893029720056802, 0.00022288490436039865, 7.1086004027165473e-05, 0.00015317196084652096, 0.00013230116746854037, 0.00012135036377003416, 0.00012637009785976261, } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 38,0,3,63,-127,-16,58,41,23,61,-14,35,0,-7,30,51, 
  /* [1][0][][] */ -49,36,-92,1,127,75,-9,9,-61,6,-59,20,-63,74,-74,-25, 
  /* [2][0][][] */ -49,74,127,-8,85,100,0,52,46,3,47,11,81,-125,10,43, 
  /* [3][0][][] */ 127,-46,27,-5,17,34,-12,-4,54,25,-64,-22,-37,28,-37,32, 
  /* [4][0][][] */ -80,-3,18,23,-95,23,-95,-22,-34,66,-5,-9,21,45,-24,127, 
  /* [5][0][][] */ -123,3,57,-7,127,27,3,8,-80,39,-1,42,-66,74,-88,-22, 
  /* [6][0][][] */ -127,23,-62,25,-16,-69,73,20,5,-44,-48,30,2,-10,-46,4, 
  /* [7][0][][] */ 4,96,7,-101,71,33,127,11,25,8,-16,49,51,13,-13,-17, 
  /* [8][0][][] */ -58,-53,-59,97,-62,66,-63,-54,37,-53,118,48,115,89,-127,-12, 
  /* [9][0][][] */ -24,-127,16,117,-61,-101,9,100,29,74,-4,89,-80,8,2,-42, 
  /* [10][0][][] */ -8,-48,-99,48,-127,85,55,-54,15,-77,50,-15,48,75,-74,66, 
  /* [11][0][][] */ -42,-114,-10,46,9,49,45,19,48,15,25,-54,35,127,-87,55, 
  /* [12][0][][] */ -14,-91,-79,94,-76,-127,29,70,79,86,-50,125,3,-27,-55,-16, 
  /* [13][0][][] */ -65,-19,-30,-5,-12,6,35,13,-10,127,-7,-24,34,40,29,0, 
  /* [14][0][][] */ -70,-21,-20,-66,-3,81,-34,-68,127,-17,31,5,84,-66,-66,-68, 
  /* [15][0][][] */ -5,-127,87,-46,-53,-26,12,52,4,-54,-85,-31,75,-26,-36,-37, 
  /* [16][0][][] */ -10,-26,7,-29,25,29,-9,-33,69,-127,44,-18,-15,2,-71,-103, 
  /* [17][0][][] */ -45,10,24,-16,34,-30,-48,45,101,-63,75,73,87,-72,-29,-127, 
  /* [18][0][][] */ 54,1,-30,-103,20,-36,88,-22,14,63,17,88,-26,85,-11,-127, 
  /* [19][0][][] */ -51,-29,3,-108,-101,65,-23,-34,46,-7,27,-127,-48,-3,-64,-17, 
  /* [20][0][][] */ -21,59,65,-94,64,9,-47,79,-116,-127,25,-91,-34,99,-16,-10, 
  /* [21][0][][] */ 34,-99,-114,6,127,11,76,100,-74,-66,-36,15,98,-68,-15,17, 
  /* [22][0][][] */ 49,1,44,-26,15,14,57,31,52,127,19,20,-5,-36,98,-16, 
  /* [23][0][][] */ -108,-79,-5,93,48,-4,-25,-3,-20,7,-11,-81,-14,89,116,127, 
  /* [24][0][][] */ 14,-13,37,22,13,-83,9,-62,19,127,-115,65,-27,-84,83,-68, 
  /* [25][0][][] */ 85,-51,120,122,38,6,2,24,-127,64,65,-56,-24,84,60,7, 
  /* [26][0][][] */ -22,21,9,45,-56,116,-19,40,-56,-35,-74,35,-1,23,37,-127, 
  /* [27][0][][] */ 26,13,3,-49,-40,8,-61,2,-96,-13,-64,-32,-63,45,-10,127, 
  /* [28][0][][] */ -34,30,18,12,-6,-20,-127,-9,-13,-21,12,9,17,-37,-31,-8, 
  /* [29][0][][] */ -35,-121,-16,106,-29,5,127,18,68,51,-106,65,21,-22,-49,73, 
  /* [30][0][][] */ 62,-26,-20,14,-127,-16,69,-44,16,12,-19,-22,-1,102,26,74, 
  /* [31][0][][] */ -127,-19,-15,92,-73,25,-30,-5,-33,-73,12,-45,-29,-85,-60,70, 
  /* [32][0][][] */ -76,-84,-70,1,-85,-37,0,-33,127,42,-51,-42,50,30,-2,-47, 
  /* [33][0][][] */ -28,23,-117,56,-127,-93,80,5,-103,15,-61,-83,-35,104,84,82, 
  /* [34][0][][] */ 45,71,18,67,-93,-51,-2,41,-3,-127,-34,43,-13,-3,34,122, 
  /* [35][0][][] */ 34,-3,-57,-18,-127,-9,61,-40,42,22,-11,-13,22,32,26,53, 
  /* [36][0][][] */ -22,-3,-44,72,127,4,59,81,-57,10,-83,-85,25,-15,-6,14, 
  /* [37][0][][] */ -111,47,-29,-68,42,-71,-50,-39,-12,-17,-12,37,30,-80,-1,-127, 
  /* [38][0][][] */ 43,85,43,-29,-80,-57,-127,-68,-37,-50,38,45,-46,-83,86,19, 
  /* [39][0][][] */ 52,-94,21,120,2,41,76,-60,-5,35,16,-46,13,127,71,76, 
  /* [40][0][][] */ 74,49,83,71,-50,-64,2,33,-76,66,-21,-10,-46,-24,127,-2, 
  /* [41][0][][] */ -7,-8,-3,50,-83,112,-16,42,-59,38,-98,26,8,28,47,-127, 
  /* [42][0][][] */ 41,-93,82,8,127,0,73,-1,-41,-100,-104,-18,5,29,19,23, 
  /* [43][0][][] */ -9,-50,-38,-15,92,32,32,44,-23,-46,-127,-81,102,-19,-13,33, 
  /* [44][0][][] */ -8,-95,-100,-119,34,108,18,9,-11,-127,-69,79,-55,20,55,126, 
  /* [45][0][][] */ 17,-42,-127,-18,-101,121,9,-111,84,-53,15,-89,25,19,-55,65, 
  /* [46][0][][] */ 45,-71,-4,-13,84,-75,-5,68,14,-8,18,54,-24,-40,58,-127, 
  /* [47][0][][] */ -18,-15,4,66,-10,8,-11,18,-8,127,71,86,-11,45,34,107, 
  /* [48][0][][] */ 55,5,-115,-95,27,-81,24,59,52,-109,18,45,-72,54,-53,-127, 
  /* [49][0][][] */ 34,20,43,22,-1,-18,39,25,-34,127,-39,51,-25,10,64,81, 
  /* [50][0][][] */ -5,-7,13,11,-127,-7,-8,-41,47,9,24,40,-18,-49,7,4, 
  /* [51][0][][] */ 36,27,16,-127,-20,55,53,-53,17,19,20,-68,100,84,-14,7, 
  /* [52][0][][] */ 22,-36,-9,-82,65,-116,-5,-29,7,-9,127,-69,39,-7,-44,92, 
  /* [53][0][][] */ -41,-72,69,-15,-32,-127,17,-95,2,90,-89,82,-36,14,32,-74, 
  /* [54][0][][] */ 36,57,62,0,-127,-32,-90,-74,-26,3,45,75,-64,-5,43,19, 
  /* [55][0][][] */ 11,21,-25,80,-40,16,53,-3,4,127,21,54,5,4,-18,42, 
  /* [56][0][][] */ 5,-102,-87,55,-53,17,-18,93,127,-1,34,36,-58,-15,32,73, 
  /* [57][0][][] */ 57,36,91,-83,84,0,-17,-36,93,-2,21,127,6,-46,118,-90, 
  /* [58][0][][] */ 66,-98,-3,-36,13,22,-14,127,63,62,19,60,21,18,100,-26, 
  /* [59][0][][] */ -70,29,8,-54,12,-56,-32,15,3,37,-91,-77,-127,-73,59,-17, 
  /* [60][0][][] */ 73,-17,49,18,-10,-47,40,-35,60,127,-12,85,-15,-10,0,-34, 
  /* [61][0][][] */ 90,93,20,-46,-120,-122,8,-74,-75,-26,-38,1,-62,-73,82,127, 
  /* [62][0][][] */ -1,78,-60,45,-112,122,-90,33,-77,-7,-61,27,-34,0,93,-127, 
  /* [63][0][][] */ 44,14,-79,-127,-11,-53,68,-7,-2,-91,-32,52,-54,62,44,-47, 
  /* [64][0][][] */ -66,15,-4,-4,72,-30,23,64,-127,0,-41,-42,-75,86,28,65, 
  /* [65][0][][] */ -69,-14,-47,5,42,33,-31,-56,-63,-65,46,-24,-127,87,-43,25, 
  /* [66][0][][] */ -13,56,-17,39,-46,127,-17,25,-57,13,-37,35,-34,57,61,-92, 
  /* [67][0][][] */ 17,14,-28,-38,8,-88,71,-91,9,27,12,127,-61,-30,-30,-103, 
  /* [68][0][][] */ 24,-127,-18,45,-10,-15,16,67,43,37,54,32,-74,5,-1,-2, 
  /* [69][0][][] */ 14,57,87,-86,71,7,-7,89,35,87,33,49,94,-53,9,-127, 
  /* [70][0][][] */ 60,-15,33,-3,80,24,-104,-74,-110,-127,33,44,-45,70,-125,-45, 
  /* [71][0][][] */ -27,-51,16,-57,102,-55,40,44,-112,98,-127,-31,14,90,7,80, 
  /* [72][0][][] */ -11,15,62,-2,-39,-17,-127,-57,-18,94,-30,65,9,126,-126,-7, 
  /* [73][0][][] */ -21,-36,-27,-58,31,-116,-4,-43,57,101,113,-5,9,-40,-86,127, 
  /* [74][0][][] */ -12,17,-19,54,-86,-4,92,19,51,58,33,106,127,50,-61,39, 
  /* [75][0][][] */ -41,68,-26,11,-66,127,-34,20,-47,42,-46,58,-18,44,35,-64, 
  /* [76][0][][] */ -75,88,-77,20,-123,1,-46,30,45,64,-62,-51,44,-83,-127,25, 
  /* [77][0][][] */ 88,64,-92,127,54,62,52,37,27,-7,97,-36,66,12,46,7, 
  /* [78][0][][] */ 13,-51,-12,-52,60,-118,24,-47,37,34,127,-30,7,-30,-32,123, 
  /* [79][0][][] */ -47,74,12,9,8,-46,-50,-19,-127,12,37,-2,90,10,-73,-31, 
  /* [80][0][][] */ -96,43,100,-25,71,33,-30,-119,-79,91,-76,-49,-27,-127,14,58, 
  /* [81][0][][] */ 86,73,-11,7,44,-35,87,124,-109,121,-68,-26,-34,28,119,127, 
  /* [82][0][][] */ 54,124,-71,-89,-39,-78,127,-120,47,8,-64,52,127,-62,93,-42, 
  /* [83][0][][] */ 2,-17,31,7,4,5,-28,-85,53,-12,79,31,17,-55,-58,-127, 
  /* [84][0][][] */ -106,-89,-39,-5,-16,83,85,-10,85,73,127,116,63,96,-99,0, 
  /* [85][0][][] */ 127,35,45,-90,89,-15,14,112,6,115,-38,72,-68,74,98,16, 
  /* [86][0][][] */ -83,70,-39,16,38,91,52,39,95,24,127,-40,-9,71,8,-19, 
  /* [87][0][][] */ 13,-62,16,-40,39,-127,21,-27,44,-16,70,-36,36,-46,-46,68, 
  /* [88][0][][] */ -78,52,19,6,109,-35,62,20,-71,-104,120,-77,99,108,127,-120, 
  /* [89][0][][] */ -35,38,-3,31,-20,127,-4,37,-57,15,-40,6,2,73,23,-77, 
  /* [90][0][][] */ 42,-68,44,29,127,6,50,51,9,-89,-116,-44,-19,9,-45,29, 
  /* [91][0][][] */ -7,45,57,-56,-39,-119,-127,32,-88,57,-127,-104,-103,-44,20,29, 
  /* [92][0][][] */ 90,43,84,34,-118,-127,1,7,-28,71,-27,-9,-45,-88,28,0, 
  /* [93][0][][] */ -29,-127,-116,76,-76,-106,-35,109,90,82,-2,36,-111,72,23,-43, 
  /* [94][0][][] */ 95,22,127,-35,0,-34,-9,19,22,77,16,70,11,17,119,0, 
  /* [95][0][][] */ -67,-56,-13,-22,127,17,27,74,-48,14,-72,-30,10,21,-53,40, 
};
const TfArray<96, float> quant19_scale = { 96, { 0.0054591209627687931, 0.0021568604279309511, 0.0051475893706083298, 0.0043511386029422283, 0.00304808234795928, 0.001027970458380878, 0.0042505711317062378, 0.0026238251011818647, 0.0010303214658051729, 0.0027030471246689558, 0.0011818443890661001, 0.0024657049216330051, 0.0034299918916076422, 0.0068196076899766922, 0.002665096428245306, 0.0035186477471143007, 0.0028424728661775589, 0.0027357677463442087, 0.004128139466047287, 0.0014564821030944586, 0.0037594749592244625, 0.0016261845594272017, 0.0037221873644739389, 0.0031809317879378796, 0.0015438607661053538, 0.0033897734247148037, 0.0033867312595248222, 0.0036563030444085598, 0.0023920226376503706, 0.0049687367863953114, 0.0035541551187634468, 0.0021370579488575459, 0.0043100588954985142, 0.0012879559071734548, 0.0022895606234669685, 0.0034970592241734266, 0.0026368338149040937, 0.0040378035046160221, 0.0028232589829713106, 0.0030857094097882509, 0.0012406624155119061, 0.0036691718269139528, 0.0035513387992978096, 0.0027218940667808056, 0.0025359815917909145, 0.0011011270107701421, 0.0027259876951575279, 0.0019894756842404604, 0.0038349002134054899, 0.0032742435578256845, 0.0037855478003621101, 0.0023227587807923555, 0.003337362315505743, 0.0024087554775178432, 0.0019415004644542933, 0.0075054671615362167, 0.002661445876583457, 0.0011373399756848812, 0.0039825220592319965, 0.0036736354231834412, 0.0030952326487749815, 0.0010156424250453711, 0.0026730508543550968, 0.0048593268729746342, 0.0011355018941685557, 0.0013040598714724183, 0.0045301155187189579, 0.003208378329873085, 0.0025569160934537649, 0.0025617799255996943, 0.0038276398554444313, 0.0019964301027357578, 0.0024496833793818951, 0.0026258912403136492, 0.003995887003839016, 0.0036031652707606554, 0.0038915225304663181, 0.002160969190299511, 0.0029994465876370668, 0.002728649415075779, 0.002028145594522357, 0.0020345079246908426, 0.0016779934521764517, 0.0014020411763340235, 0.002417620737105608, 0.0014586090110242367, 0.0023859285283833742, 0.0046195229515433311, 0.003478518221527338, 0.0040394463576376438, 0.0037681767717003822, 0.0012018069392070174, 0.0025895833969116211, 0.0022367336787283421, 0.0020515953656286001, 0.0021364607382565737, } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -4047, 12628, -21942, 1812, 13448, -15429, -39581, -10100, -3056, 8934, -15937, -14413, 8201, -12085, -2939, -4500, };
const TfArray<16, float> quant20_scale = { 16, { 0.00011736296437447891, 0.00013736537948716432, 0.00016288593178614974, 0.0001163038396043703, 0.00010597593063721433, 0.00016004590725060552, 0.00010219233809038997, 0.00014637866115663201, 7.7639873779844493e-05, 7.4065581429749727e-05, 0.00015187723329290748, 0.00015497859567403793, 0.00011238375009270385, 0.0001015720990835689, 0.00014294231368694454, 0.00014510253095068038, } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 23,47,18,-25,68,62,-37,61,-11,112,-1,53,-28,30,-18,51,41,74,43,-66,-60,66,-12,36,65,42,39,50,-53,-52,-10,86,-24,8,-72,51,46,-127,-27,4,9,-16,68,-7,-6,-46,-61,-22, 
  /* [1][0][][] */ -48,1,-77,-34,9,80,-61,20,-10,-33,-42,30,57,-22,-36,-31,-22,-33,0,17,-60,39,-103,-52,-54,-45,44,62,-32,-19,36,-38,10,-55,-29,48,6,-58,127,-36,-29,25,-46,-13,23,52,21,17, 
  /* [2][0][][] */ -7,14,54,-38,-14,-70,16,17,112,76,-61,8,112,-42,127,69,-57,-23,-35,32,84,-80,-27,-112,18,-41,35,-62,46,52,-26,24,36,-21,58,45,-79,28,-1,-38,35,32,69,-9,21,-71,98,-44, 
  /* [3][0][][] */ 32,8,-29,-24,24,104,23,-8,42,-41,18,-24,-52,11,9,48,-44,-69,41,-112,-13,-14,-22,-23,-37,87,127,59,-2,-41,24,42,59,-21,82,31,-60,-55,4,36,29,20,-23,-11,29,20,-10,-22, 
  /* [4][0][][] */ 80,-21,4,-43,84,81,43,-4,66,-8,-105,17,26,-5,11,-16,-105,-115,-27,-92,-17,22,-36,-42,-79,127,-101,117,-53,-58,18,67,45,-36,15,-33,-16,8,-23,34,-51,-6,1,31,-60,103,-25,-55, 
  /* [5][0][][] */ 6,-12,-54,5,-14,49,21,-27,65,52,41,90,57,-26,34,2,-34,127,-19,33,14,1,-69,-14,35,-1,-65,-40,-10,27,19,-16,-35,3,40,13,-45,3,-83,2,91,-19,32,49,-17,8,-35,30, 
  /* [6][0][][] */ 35,5,13,72,-7,-36,116,-80,-11,72,117,95,26,62,-56,75,21,-45,-97,88,45,-55,-57,66,-80,118,85,-9,100,49,-34,-4,101,-77,-127,-21,98,35,-1,13,23,70,50,-58,59,120,32,-3, 
  /* [7][0][][] */ -94,-5,-30,24,-56,-50,25,47,77,113,-58,-72,-98,18,-14,-15,-81,98,-8,118,-44,50,29,53,-21,-95,-35,-82,34,48,-9,13,-17,17,18,-19,3,-55,127,15,18,49,17,-20,51,83,-33,-3, 
  /* [8][0][][] */ -9,-108,56,-71,65,-65,78,-40,-23,-127,27,10,-40,6,25,39,-11,7,-45,112,-7,42,-13,30,71,-11,-67,-36,-125,-42,-66,-118,7,-75,-4,89,0,28,115,15,14,-5,85,122,-10,-82,-44,83, 
  /* [9][0][][] */ 4,-27,21,-67,34,71,-40,46,9,-11,-38,-22,23,-50,117,-18,10,-127,31,46,-56,38,49,-44,-34,-79,-30,79,43,86,-42,-22,-52,12,-4,107,-30,-48,-45,-18,-31,-3,43,103,53,83,-78,5, 
  /* [10][0][][] */ -20,19,-20,4,21,21,-60,-37,49,32,69,-6,-31,-11,40,-52,-55,127,4,40,12,-11,14,27,-42,44,7,95,33,7,-24,-6,66,19,-1,17,-17,-45,-33,24,-82,4,26,-22,17,48,28,30, 
  /* [11][0][][] */ -40,52,-16,26,35,61,-6,11,18,23,-127,-77,69,22,-10,-49,-1,26,-67,-43,-7,-12,107,2,51,14,-15,35,-10,27,-9,49,28,-4,-49,1,41,78,105,24,32,-30,69,-2,-49,-29,93,7, 
  /* [12][0][][] */ -54,-10,34,19,-55,-57,11,9,-25,-36,-123,10,63,-93,25,46,41,100,78,-127,-29,30,-34,-77,-6,-20,30,-33,8,2,-21,81,56,85,38,-44,-54,-40,19,2,-29,20,54,-1,35,-21,-32,-36, 
  /* [13][0][][] */ -49,-104,-46,-112,8,26,55,2,-127,36,112,-59,52,36,119,16,105,16,-8,-94,87,-76,103,3,-70,17,-18,11,-48,-94,-114,29,53,-25,-74,55,36,-67,88,-71,-6,59,67,33,61,-18,103,-55, 
  /* [14][0][][] */ 56,28,-45,19,-38,15,-72,-28,-26,52,50,45,-17,-61,11,-34,45,-107,23,7,81,-49,22,-5,-6,127,-77,1,-61,-32,-87,2,124,35,89,-21,-78,11,-18,55,-10,-42,100,-26,-59,-45,-64,47, 
  /* [15][0][][] */ -51,22,37,22,90,1,5,35,15,82,-21,53,60,-23,-25,-9,15,32,2,-39,36,-33,-52,-48,56,-64,-36,57,-34,19,13,9,-59,0,127,-3,-85,12,56,-9,-36,-17,20,6,-36,-26,-15,9, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0049879257567226887, 0.0058380286209285259, 0.0069226520135998726, 0.0049429130740463734, 0.0045039770193397999, 0.0068019507452845573, 0.0043431743979454041, 0.0062210927717387676, 0.0032996945083141327, 0.003147787181660533, 0.0064547820948064327, 0.0065865903161466122, 0.0047763092443346977, 0.0043168142437934875, 0.006075048353523016, 0.0061668576672673225, } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 13436, 414, 21334, -273, 12288, -2696, 50485, -153, 10894, 43778, 4404, 31997, 1278, 12443, 32713, 30057, 504, 3329, 5613, 49040, -512, 16487, 1277, 18320, 19589, 38445, 1104, -2521, -2149, 17920, 20771, -74, 1035, 2061, 1114, 16788, 10466, 29580, 2073, 19212, 30264, -2511, 596, 13102, -501, -744, 38606, 27579, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 6.9328540121205151e-05, 0.0001511978916823864, 5.7780060160439461e-05, 0.00011267543595749885, 0.00011469477612990886, 6.1299273511394858e-05, 3.8868605770403519e-05, 0.00023438435164280236, 0.00011759131302824244, 4.7109348088270053e-05, 5.6775283155729994e-05, 6.5666405134834349e-05, 5.9251262428006157e-05, 9.6180694526992738e-05, 5.3443865908775479e-05, 8.9053923147730529e-05, 6.9464105763472617e-05, 5.4556148825213313e-05, 0.000165161894983612, 4.3327192543074489e-05, 5.8769310271600261e-05, 6.0204216424608603e-05, 8.7843902292661369e-05, 0.00011256182915531099, 6.7038447014056146e-05, 6.7771063186228275e-05, 5.4848078434588388e-05, 5.2631588914664462e-05, 0.00023693045659456402, 8.2070917414966971e-05, 6.9449968577828258e-05, 0.00029657833511009812, 0.0001118533982662484, 0.00019671324116643518, 6.8713743530679494e-05, 6.692881288472563e-05, 8.6407577327918261e-05, 6.0040634707547724e-05, 7.8876320912968367e-05, 0.00011678256851155311, 5.6188389862654731e-05, 0.00019537305342964828, 0.00033419913961552083, 7.4870629759971052e-05, 0.00018814975919667631, 6.8551591539289802e-05, 5.3222011047182605e-05, 5.1334041927475482e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -103,54,-127,103,-81,86,-61,77,-73,-84,70,-88,75,-82,-44,-58,72,69,76,-108,97,-108,83,-110,-65,-67,79,127,-121,-127,-104,23,101,-97,60,-115,-78,-126,107,-46,-13,-72,108,-127,88,59,-84,-111, -123,68,-51,124,-57,123,-56,92,-105,-127,98,-83,105,-87,-74,-53,101,103,127,-127,121,-127,106,-127,-75,-102,94,120,21,-126,-79,40,127,-127,95,-118,-78,-113,122,-73,-96,89,127,-82,-29,91,-60,-127, -75,63,0,27,-11,73,-62,68,-73,-59,44,-49,61,-59,-32,-23,50,58,60,-40,46,-74,49,-53,-82,-60,21,35,118,-61,-47,78,31,-86,49,-57,-42,-32,42,-68,-126,-34,66,-73,-56,56,-39,-65, 
  /* [0][1][][] */ -68,95,-72,111,-56,121,-127,112,-75,-120,96,-109,104,-127,-91,-112,127,96,-68,-120,121,-99,115,-69,-88,-98,116,110,-127,-82,-117,120,84,31,100,-125,-90,-122,106,-80,-106,-84,81,-124,127,58,-109,-86, -127,116,-103,127,-127,127,-109,127,-127,-120,127,-127,127,-117,-127,-94,118,127,-72,-121,127,-87,127,-60,-95,-127,127,124,17,-126,-127,105,93,32,127,-127,-127,-127,127,-127,-105,127,94,-90,-61,127,-127,-71, -61,127,-120,38,-66,56,-81,55,-48,-50,61,-75,100,-8,-52,-46,58,56,-44,-44,56,-59,58,-45,-127,-71,38,54,96,-40,-29,127,-6,11,70,-42,-47,4,64,-47,-72,-55,62,-23,-86,86,-29,-47, 
  /* [0][2][][] */ -58,73,0,58,-9,61,-113,61,-44,-23,33,-68,60,-81,-37,-127,69,60,-76,-17,33,-19,44,-47,-104,-35,49,16,-66,-56,-35,47,34,52,55,-70,-34,-52,52,-28,-127,-33,41,-80,86,40,-58,-72, -93,108,-90,69,-57,45,-104,49,-45,-57,40,-110,80,-56,-93,-92,108,75,-88,-17,45,-6,55,-68,-91,-63,62,31,15,-119,-71,64,43,55,85,-63,-56,-27,48,-61,-70,97,53,-71,-27,77,-49,-79, -28,82,-83,13,-32,41,-66,41,-14,-7,16,-51,44,-1,-42,-51,39,33,-81,-6,16,20,18,-32,-66,-39,40,14,80,-54,-33,97,13,23,61,-4,-54,30,44,-38,-2,-5,29,-17,-44,62,-2,-62, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0029464629478752613, 0.0064259101636707783, 0.0024556524585932493, 0.0047887060791254044, 0.004874527920037508, 0.0026052191387861967, 0.0016519157215952873, 0.0099613349884748459, 0.0049976306036114693, 0.0020021472591906786, 0.0024129494559019804, 0.0027908221818506718, 0.0025181786622852087, 0.0040876795537769794, 0.0022713642101734877, 0.0037847915664315224, 0.00295222457498312, 0.0023186362814158201, 0.0070193805731832981, 0.0018414056394249201, 0.0024976956192404032, 0.002558679087087512, 0.0037333657965064049, 0.0047838776372373104, 0.0028491339180618525, 0.0028802701272070408, 0.0023310433607548475, 0.0022368424106389284, 0.010069544427096844, 0.0034880139864981174, 0.0029516236390918493, 0.012604578398168087, 0.0047537693753838539, 0.008360312320291996, 0.0029203339945524931, 0.0028444745112210512, 0.0036723220255225897, 0.0025517269968986511, 0.0033522434532642365, 0.0049632592126727104, 0.002388006541877985, 0.0083033544942736626, 0.01420346274971962, 0.0031820016447454691, 0.0079963644966483116, 0.0029134426731616259, 0.0022619355004280806, 0.002181696705520153, } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 1675, -1854, 772, -1780, 3193, -601, 3989, -3253, 1058, 561, 2003, 3197, 384, -383, 1027, 6423, -1266, 3218, 6126, 876, -803, 2209, -754, 6414, 1740, 1730, 1236, -815, 10774, -297, 2567, -2036, -604, 4291, -715, 1694, 1806, 812, 408, 4029, 1845, 8538, -4549, 1264, 7171, 174, 2311, 2461, };
const TfArray<48, float> quant24_scale = { 48, { 0.00025465057115070522, 0.00026159314438700676, 0.00032899275538511574, 0.000250292505370453, 0.00024101033341139555, 0.00025435545830987394, 0.00019096644246019423, 0.00015781442925799638, 0.00032304803607985377, 0.00036087044281885028, 0.00021653212024830282, 0.00023319556203205138, 0.00031762322760187089, 0.00029311084654182196, 0.00026433862512931228, 0.00014400592772290111, 0.00027313188184052706, 0.00023449085711035877, 0.00015516830899287015, 0.00031336018582805991, 0.00031980790663510561, 0.00025575354811735451, 0.00025325850583612919, 0.00014101188571657985, 0.00025878919404931366, 0.00024188465613406152, 0.00026656856061890721, 0.00031472177943214774, 8.9825029135681689e-05, 0.0003483713953755796, 0.00019839915330521762, 0.00017913502233568579, 0.00022964517120271921, 0.00020043418044224381, 0.00025509519036859274, 0.00030353630427271128, 0.00022089127742219716, 0.00033216469455510378, 0.00029389251722022891, 0.0002110899513354525, 0.00030740327201783657, 0.0001024812736432068, 0.00012968768714927137, 0.00032697524875402451, 0.00012632491416297853, 0.00027093355311080813, 0.00024047199985943735, 0.00025544947129674256, } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 66,33,127,-31,62,101,-68,-39, 
  /* [1][0][][] */ 15,-86,-127,6,53,12,33,5, 
  /* [2][0][][] */ -127,-3,-39,-30,51,21,-67,-47, 
  /* [3][0][][] */ 32,74,127,-64,-13,-102,-6,-24, 
  /* [4][0][][] */ -127,26,-60,-28,30,9,-57,-54, 
  /* [5][0][][] */ -103,27,-52,-14,15,38,-78,-127, 
  /* [6][0][][] */ -30,-127,-126,38,87,1,-1,49, 
  /* [7][0][][] */ -68,-127,-114,-78,-65,-70,14,92, 
  /* [8][0][][] */ 83,27,-24,1,87,-72,-127,22, 
  /* [9][0][][] */ -31,47,-54,97,-68,-41,127,-28, 
  /* [10][0][][] */ -23,127,40,65,126,-29,-12,57, 
  /* [11][0][][] */ -81,-32,-27,5,-69,113,127,-6, 
  /* [12][0][][] */ 68,38,-127,23,-13,-35,-67,-8, 
  /* [13][0][][] */ 47,-33,-76,4,5,-127,-32,-30, 
  /* [14][0][][] */ 8,-87,82,15,127,-127,-92,21, 
  /* [15][0][][] */ -46,-43,-1,127,66,70,-86,37, 
  /* [16][0][][] */ 127,28,-33,-8,76,-124,-124,-38, 
  /* [17][0][][] */ 56,127,48,61,41,57,24,-72, 
  /* [18][0][][] */ 37,-16,-8,-17,127,1,33,-6, 
  /* [19][0][][] */ 15,127,31,7,-125,9,14,-26, 
  /* [20][0][][] */ -51,14,69,-127,24,45,-21,115, 
  /* [21][0][][] */ -46,64,39,-127,55,44,4,106, 
  /* [22][0][][] */ -81,-82,-87,15,-125,127,107,-18, 
  /* [23][0][][] */ 99,32,-127,15,1,-42,-84,-14, 
  /* [24][0][][] */ -41,38,21,7,-17,57,-127,103, 
  /* [25][0][][] */ -90,-57,-127,10,-58,-66,59,96, 
  /* [26][0][][] */ 63,-6,-50,-37,127,-26,122,-35, 
  /* [27][0][][] */ 127,-72,31,90,11,32,-13,100, 
  /* [28][0][][] */ 61,43,63,-1,127,-91,61,-68, 
  /* [29][0][][] */ -3,-20,-30,-59,-81,4,127,-24, 
  /* [30][0][][] */ 47,-127,-33,-78,-98,-6,7,-60, 
  /* [31][0][][] */ 11,34,-8,-16,-127,13,-27,-5, 
  /* [32][0][][] */ 51,-56,-55,77,-8,-102,125,-127, 
  /* [33][0][][] */ 40,127,51,25,43,-31,-36,-18, 
  /* [34][0][][] */ -122,-35,127,-17,-30,89,96,12, 
  /* [35][0][][] */ -30,77,127,-6,-57,-70,-25,33, 
  /* [36][0][][] */ -127,15,103,-18,-34,125,97,10, 
  /* [37][0][][] */ -25,-62,-2,-127,-36,-70,65,48, 
  /* [38][0][][] */ 42,-24,83,-57,48,57,-127,6, 
  /* [39][0][][] */ -14,64,-127,-44,-4,3,7,69, 
  /* [40][0][][] */ 71,-56,25,33,8,-1,3,127, 
  /* [41][0][][] */ -19,113,127,31,-14,110,-96,71, 
  /* [42][0][][] */ 72,-120,-120,-38,-127,-25,11,-105, 
  /* [43][0][][] */ -21,-63,36,-57,127,-52,8,40, 
  /* [44][0][][] */ -10,127,109,16,-17,53,-91,21, 
  /* [45][0][][] */ -32,44,9,76,-109,57,-127,28, 
  /* [46][0][][] */ -47,-49,64,46,-126,-127,-27,-3, 
  /* [47][0][][] */ -11,42,30,-97,-127,35,-32,70, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.002648599911481142, 0.0027208093088120222, 0.0034218272194266319, 0.0026032722089439631, 0.002506728982552886, 0.0026455307379364967, 0.0019862265326082706, 0.0016414151759818196, 0.0033599967136979103, 0.0037533843424171209, 0.002252133097499609, 0.0024254482705146074, 0.0033035736996680498, 0.0030486222822219133, 0.002749364823102951, 0.0014977940591052175, 0.0028408225625753403, 0.0024389205500483513, 0.0016138930805027485, 0.0032592338975518942, 0.0033262963406741619, 0.0026600719429552555, 0.0026341213379055262, 0.001466653193347156, 0.0026916456408798695, 0.0025158228818327188, 0.0027725582476705313, 0.0032733958214521408, 0.00093426287639886141, 0.0036233826540410519, 0.0020635335240513086, 0.0018631689017638564, 0.0023885208647698164, 0.0020846996922045946, 0.0026532246265560389, 0.0031570566352456808, 0.0022974724415689707, 0.003454818157479167, 0.0030567522626370192, 0.0021955296397209167, 0.0031972764991223812, 0.0010658995015546679, 0.001348871155641973, 0.0034008431248366833, 0.0013138952199369669, 0.002817958127707243, 0.0025011298712342978, 0.002656909404322505, } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 1570, 1361, 22885, -2933, 3470, -14658, -3366, -11862, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00010968523565679789, 0.00010278722766088322, 0.0001290256914217025, 0.00010215415386483073, 0.00011600445577641949, 0.00013754716201219708, 9.1116198746021837e-05, 9.1732479631900787e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -42,-46,-13,-63,3,-18,89,94,-106,-75,-40,2,-47,-4,-59,35,-85,9,18,127,61,-28,-7,88,73,88,41,11,-95,-66,-71,-52,-48,101,24,-41,34,-18,92,-6,40,12,-10,-107,35,-29,-34,-84, 
  /* [1][0][][] */ -9,50,-24,-26,-70,70,-12,-37,-33,80,-11,13,54,30,-56,3,-17,-122,79,-55,127,6,-58,23,65,-9,-89,58,42,-18,79,20,-39,-10,2,-22,8,105,-18,-27,65,46,-4,15,121,11,-31,59, 
  /* [2][0][][] */ -15,-43,126,14,98,-46,-13,38,-33,-3,-13,47,1,-49,-53,-127,-50,-100,-21,12,-105,40,-37,-50,-55,15,2,-55,-34,7,-26,-11,-11,-4,21,0,26,-32,-56,10,32,-37,38,-50,-40,-42,-64,-56, 
  /* [3][0][][] */ 51,21,58,12,19,-32,43,73,-41,-25,50,-21,-73,48,-20,50,57,32,-31,25,-105,-104,117,-5,14,-4,-61,-33,-62,60,127,-73,2,-110,-24,27,-8,-79,-16,62,-75,-58,63,-13,-88,-69,57,-2, 
  /* [4][0][][] */ 17,-13,73,-42,2,-14,-13,-6,-52,-8,-24,4,37,-72,37,-94,40,47,-15,-36,12,28,23,9,-4,-5,62,-17,28,22,-127,-20,-19,-22,-1,11,43,1,35,8,-30,-7,-68,33,-22,-88,8,23, 
  /* [5][0][][] */ 27,-39,50,18,34,11,35,-2,-79,-13,-38,28,24,3,3,-51,85,73,-4,-21,89,-62,127,-80,-15,44,1,44,15,17,-37,-46,-8,-44,-40,8,38,30,66,6,-79,26,43,22,41,-11,81,4, 
  /* [6][0][][] */ -32,60,-114,100,46,24,46,29,-16,-18,62,-64,-81,-12,-36,45,-114,34,-5,96,19,73,-81,-82,-6,-14,43,71,-27,-24,-40,6,50,75,-43,-28,-14,-13,88,3,75,49,-127,-52,-20,111,-48,-30, 
  /* [7][0][][] */ 22,65,-80,7,10,41,107,66,39,55,-96,-12,-55,1,-58,-53,23,35,104,87,85,-5,127,38,98,77,-46,92,-77,33,-6,-68,25,-63,-27,21,-1,85,-57,79,-72,42,-3,-71,61,-15,54,-27, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0046616224572062492, 0.0043684570118784904, 0.0054835919290781021, 0.0043415515683591366, 0.0049301893450319767, 0.0058457544073462486, 0.0038724383339285851, 0.0038986303843557835, } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { 864, 13943, -406, 183, 1861, -1932, 1738, -3585, -2242, 80, -3830, -82, -1162, -1180, -2211, 3191, 5273, 4467, -1296, -3506, -8972, 4818, 16496, -3423, -3883, 163, 9336, -7714, -390, -1314, -5366, 8963, 3857, -168, 2697, -567, 219, -923, 14468, -1226, 8273, -3643, 3289, 6400, -1221, 14221, -2762, 970, };
const TfArray<48, float> quant28_scale = { 48, { 0.00027890969067811966, 0.00012285700358916074, 0.00073900917777791619, 0.00029909191653132439, 0.00023698624863754958, 0.00018738019571173936, 0.00023135772789828479, 0.00032237428240478039, 0.00013942120131105185, 0.00020840672368649393, 0.00029229591018520296, 0.0014443296240642667, 0.00048162884195335209, 0.00048497610259801149, 0.00041355806752108037, 0.0007596183568239212, 0.00019782508024945855, 6.116907752584666e-05, 0.00021263104281388223, 0.00030899103148840368, 0.00022988168348092586, 0.00027069836505688727, 8.7467633420601487e-05, 0.00043581859790720046, 0.00020859263895545155, 0.00041499492363072932, 0.00053223251597955823, 0.00019860848260577768, 0.00028762209694832563, 0.00041614298243075609, 0.00016661058180034161, 0.00016637275984976441, 0.00014601867587771267, 0.00022070320846978575, 0.00015912404342088848, 0.00026402456569485366, 0.001516233547590673, 0.00033020961564034224, 0.00013166402641218156, 0.00019115915347356349, 0.00015781215915922076, 0.00013533598394133151, 0.00035715571721084416, 0.00020698287698905915, 0.00031284548458643258, 6.4080108131747693e-05, 7.0997462898958474e-05, 0.00018672873557079583, } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 9,-62,9,-1,-31,-96,-44,49,-45,-6,-9,9,49,0,-13,7,85,21,34,2,8,-35,-62,16,27,-22,-28,-21,-58,79,-23,-94,62,-5,-34,-61,-16,-38,-9,-11,-20,39,12,12,-12,64,127,-3, -127,-93,-24,127,-85,87,-98,127,9,14,2,0,52,33,-12,-36,-33,81,31,-2,18,127,14,127,127,-38,-62,46,62,-124,-27,-62,82,-7,-24,-126,18,13,-66,-44,-127,-2,-99,-127,29,49,40,108, -15,-2,12,6,-33,50,42,59,-14,-36,-4,2,-16,10,-8,7,-54,60,-63,-35,3,-40,127,27,-18,2,-5,25,14,44,-8,4,4,-17,-33,78,1,14,1,82,13,-23,33,-47,-10,22,-14,-7, 
  /* [0][1][][] */ -13,-35,-27,-6,30,-109,127,-83,-14,9,23,29,127,7,6,-25,-25,-52,45,60,77,-80,47,8,-35,127,-94,-12,127,-93,37,-127,-42,6,-71,16,0,-65,-52,13,125,127,18,-114,-63,-55,4,76, 81,-127,127,2,127,65,-69,-47,28,127,127,-127,-96,127,127,127,127,127,127,127,127,115,3,4,85,-106,-127,101,32,127,127,3,-127,127,127,127,-127,127,-127,-120,51,44,-127,-33,127,-127,-22,62, 19,37,-40,-7,-59,127,-116,104,76,-84,13,60,-34,16,11,-58,19,1,-123,14,24,-126,-33,-4,54,-14,-31,127,-82,-33,4,-22,-27,17,95,-15,28,4,-12,-80,108,2,40,43,-58,92,88,-79, 
  /* [0][2][][] */ 0,-1,7,-44,1,-66,-13,6,8,-6,-17,-2,-10,-21,3,0,-49,2,20,-36,13,-52,92,-22,-80,1,36,-20,28,7,-3,12,1,-9,-71,34,-3,-6,-6,42,-43,5,9,-2,-13,31,2,-1, 28,-45,-37,-42,27,40,116,-78,127,-38,-22,5,-68,-24,-20,-72,-15,111,13,22,21,10,-18,-43,-66,58,85,0,-88,22,-37,-20,-17,-1,-38,3,47,-19,-15,127,-127,4,-17,47,37,72,18,-127, -9,2,3,-26,-13,1,-7,-41,-42,-27,-24,3,24,-13,-7,10,50,36,-19,-26,-6,-51,-37,-21,12,-24,19,-5,-21,13,-17,7,23,-16,-16,-44,-11,15,10,41,-26,-14,9,6,-16,33,74,-47, 
};
const TfArray<48, float> quant29_scale = { 48, { 0.011853661388158798, 0.0052214222960174084, 0.031407888978719711, 0.01271140668541193, 0.010071915574371815, 0.0079636583104729652, 0.0098327035084366798, 0.013700906187295914, 0.0059254011139273643, 0.0088572856038808823, 0.012422575615346432, 0.061384007334709167, 0.020469225943088531, 0.020611483603715897, 0.017576217651367188, 0.032283779233694077, 0.0084075657650828362, 0.0025996856857091188, 0.0090368194505572319, 0.013132118619978428, 0.0097699714824557304, 0.011504679918289185, 0.0037173742894083261, 0.018522290512919426, 0.00886518694460392, 0.017637284472584724, 0.022619882598519325, 0.0084408605471253395, 0.012223938480019569, 0.017686076462268829, 0.0070809498429298401, 0.0070708421990275383, 0.0062057934701442719, 0.0093798860907554626, 0.0067627718672156334, 0.011221043765544891, 0.064439922571182251, 0.01403390895575285, 0.0055957213044166565, 0.0081242639571428299, 0.0067070163786411285, 0.0057517793029546738, 0.01517911721020937, 0.0087967719882726669, 0.013295932672917843, 0.0027234044391661882, 0.0030173920094966888, 0.0079359710216522217, } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 2691, 3731, 12182, 2014, 2760, -1216, 4447, 10834, 3574, -495, 3528, -2398, 23539, -1446, 1512, 23045, -262, 2326, 151, 3005, 3134, 5318, 644, 24939, 5490, 3998, 24537, 1663, 6135, 5067, 470, 1321, 1361, 1603, -148, 167, -2769, -456, 2180, 1828, 3292, 2476, 4366, 3779, 3329, 2480, 2093, 5043, };
const TfArray<48, float> quant30_scale = { 48, { 0.00023900342057459056, 0.00020721853070426732, 7.6781856478191912e-05, 0.00016142884851433337, 0.00020446459529921412, 0.00029641631408594549, 0.00015469892241526395, 8.6935149738565087e-05, 0.0001409007963957265, 0.00028060271870344877, 0.00023255324049387127, 0.0002170690568163991, 4.3019488657591864e-05, 0.00026052276371046901, 0.00028931110864505172, 4.7131601604633033e-05, 0.00031221890822052956, 0.00019607371359597892, 0.00032491073943674564, 0.00020520368707366288, 0.00022574511240236461, 0.00017071724869310856, 0.00039889011532068253, 4.4662006985163316e-05, 0.00014732129056937993, 0.00016236498777288944, 4.5252931158756837e-05, 0.00027143667102791369, 0.00012649719428736717, 0.00014858604117762297, 0.00052495766431093216, 0.00038717399002052844, 0.00019649372552521527, 0.00023294167476706207, 0.0003317396913189441, 0.00032379745971411467, 0.00019487710960675031, 0.00034962414065375924, 0.00025942118372768164, 0.0002417720970697701, 0.00021229834237601608, 0.00022469979012385011, 0.00019584984693210572, 0.00021119015582371503, 0.00019869599782396108, 0.00025187310529872775, 0.00034946025698445737, 0.00015841546701267362, } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 48,127,-101,-77,12,51,-2,73, 
  /* [1][0][][] */ 47,-74,44,-127,-57,64,-82,-39, 
  /* [2][0][][] */ -25,127,103,30,97,-3,41,7, 
  /* [3][0][][] */ 127,34,-117,95,-18,-123,-97,-52, 
  /* [4][0][][] */ -62,29,14,-80,-37,106,127,43, 
  /* [5][0][][] */ 17,85,-127,-70,37,101,23,-13, 
  /* [6][0][][] */ -24,127,62,67,57,16,31,-71, 
  /* [7][0][][] */ 127,-23,-23,25,35,6,106,18, 
  /* [8][0][][] */ 67,127,64,91,118,86,99,-89, 
  /* [9][0][][] */ 44,127,-118,-83,31,107,17,92, 
  /* [10][0][][] */ -63,-38,16,-57,-7,-32,-52,127, 
  /* [11][0][][] */ 19,-127,-116,-5,30,-15,57,-11, 
  /* [12][0][][] */ -28,-106,-127,-62,-96,37,-70,27, 
  /* [13][0][][] */ 3,3,-105,101,-127,-36,-6,-21, 
  /* [14][0][][] */ -67,-44,-127,-4,34,-1,-17,-57, 
  /* [15][0][][] */ 16,-105,-127,27,-109,-35,-31,-4, 
  /* [16][0][][] */ 127,-70,-17,66,-84,28,31,103, 
  /* [17][0][][] */ -40,120,127,-23,-53,-16,-34,-23, 
  /* [18][0][][] */ 3,-127,37,65,-28,-62,37,-76, 
  /* [19][0][][] */ 127,-48,-60,34,-95,-1,31,96, 
  /* [20][0][][] */ -34,-127,86,82,-9,-92,-5,-69, 
  /* [21][0][][] */ 1,-38,-11,-37,127,-10,40,19, 
  /* [22][0][][] */ -127,22,-74,50,40,41,-93,-112, 
  /* [23][0][][] */ -75,-38,65,-12,-110,127,98,-55, 
  /* [24][0][][] */ -33,54,15,-27,-54,127,114,-16, 
  /* [25][0][][] */ -57,-84,-127,-44,-55,-2,-26,-19, 
  /* [26][0][][] */ -7,71,-24,127,-121,35,-67,-14, 
  /* [27][0][][] */ 16,-127,30,75,14,-53,1,-121, 
  /* [28][0][][] */ 31,127,56,51,123,1,11,-47, 
  /* [29][0][][] */ 80,27,-47,-10,52,-127,-121,16, 
  /* [30][0][][] */ 23,-10,41,-127,5,-8,25,-38, 
  /* [31][0][][] */ 39,-47,-5,58,-26,31,4,127, 
  /* [32][0][][] */ -120,-91,-2,-84,-66,127,78,122, 
  /* [33][0][][] */ -30,56,49,-35,46,127,-126,87, 
  /* [34][0][][] */ 22,127,-70,-32,4,55,-58,63, 
  /* [35][0][][] */ 10,-127,29,49,-24,-57,53,-73, 
  /* [36][0][][] */ -18,-38,-82,-10,-127,-59,-20,23, 
  /* [37][0][][] */ -66,-127,64,79,-32,-71,-3,-42, 
  /* [38][0][][] */ -65,17,55,-77,-127,-95,-62,84, 
  /* [39][0][][] */ 77,-127,91,70,-20,-82,-43,-77, 
  /* [40][0][][] */ -3,50,36,59,-127,-10,-66,16, 
  /* [41][0][][] */ 125,127,-83,-114,71,29,1,16, 
  /* [42][0][][] */ -7,-40,-26,8,127,15,50,22, 
  /* [43][0][][] */ 127,28,87,35,-78,-44,57,93, 
  /* [44][0][][] */ 53,49,4,22,69,-109,-127,46, 
  /* [45][0][][] */ 49,23,25,19,84,-127,8,-68, 
  /* [46][0][][] */ 54,-43,-8,127,43,60,25,73, 
  /* [47][0][][] */ -59,-77,43,45,-50,42,127,-76, 
};
const TfArray<48, float> quant31_scale = { 48, { 0.0032307393848896027, 0.0028010858222842216, 0.0010379021987318993, 0.0021821216214448214, 0.0027638592291623354, 0.0040068207308650017, 0.0020911495666950941, 0.0011751498095691204, 0.0019046328961849213, 0.0037930598482489586, 0.0031435487326234579, 0.0029342407360672951, 0.0005815178737975657, 0.0035216282121837139, 0.0039107757620513439, 0.00063710351241752505, 0.0042204330675303936, 0.0026504350826144218, 0.0043919952586293221, 0.0027738499920815229, 0.0030515196267515421, 0.0023076781071722507, 0.0053920149803161621, 0.00060372066218405962, 0.0019914221484214067, 0.0021947759669274092, 0.00061170849949121475, 0.0036691573914140463, 0.0017099315300583839, 0.0020085184369236231, 0.0070961387827992439, 0.0052336417138576508, 0.0026561126578599215, 0.00314879952929914, 0.0044843060895800591, 0.0043769464828073978, 0.0026342601049691439, 0.0047260597348213196, 0.0035067375283688307, 0.003268165048211813, 0.0028697522357106209, 0.0030373893678188324, 0.0026474089827388525, 0.0028547723777592182, 0.0026858819182962179, 0.003404705785214901, 0.0047238445840775967, 0.0021413881331682205, } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 7493, 14638, -3799, 6233, -1502, 3935, -12400, -19337, };
const TfArray<8, float> quant32_scale = { 8, { 0.00022239011013880372, 0.00013316934928297997, 0.00014815121539868414, 0.0001343012263532728, 0.00018741532403510064, 0.00016083172522485256, 0.00017877813661471009, 0.00014339317567646503, } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -50,-6,33,8,-36,-16,6,9,-41,-5,-66,-55,-24,-65,-8,-34,45,-39,37,44,-23,35,-36,10,3,-39,55,-11,-3,-28,18,12,82,34,37,-127,15,-1,-21,-32,2,-19,49,45,35,2,27,1, 
  /* [1][0][][] */ -4,37,62,-32,-16,45,-45,-22,5,25,-17,-89,8,96,-14,50,-16,25,-22,-53,17,-78,-32,20,-64,-11,-8,-113,-21,-11,29,-43,42,70,-32,-4,127,-33,-13,52,-32,42,-78,-31,112,-21,-31,-30, 
  /* [2][0][][] */ -1,-27,-58,6,-4,44,22,5,-2,46,-4,27,62,-90,16,-62,29,-84,18,23,-20,48,-11,24,-19,65,-26,-69,19,8,19,-71,-44,-84,42,-31,99,20,-27,-53,-4,30,76,26,127,14,19,20, 
  /* [3][0][][] */ -4,22,-64,41,15,-42,-66,-100,14,-23,-33,-3,10,24,41,76,-8,14,-32,30,3,-96,28,-64,-74,-15,127,-10,-44,2,-62,16,-3,-80,11,-9,-21,-41,-15,98,-45,-33,4,20,40,5,-39,39, 
  /* [4][0][][] */ -17,-48,-3,5,29,-28,-16,-9,29,-27,58,-76,6,31,10,16,-16,-27,14,-16,-7,-51,-3,-18,13,-12,37,40,37,20,-11,25,-13,-4,6,-1,-64,85,32,-27,30,-20,-20,-18,-72,13,127,10, 
  /* [5][0][][] */ 47,-25,-1,18,27,-42,31,-127,30,-28,-12,116,-77,67,23,-66,-5,-92,17,6,-44,65,-39,-52,-56,75,-28,0,-18,50,-46,-40,24,50,34,0,-43,-4,-45,-44,11,-35,-44,-4,-32,48,90,21, 
  /* [6][0][][] */ 53,-21,25,-15,-40,-17,-35,20,-41,8,-38,127,-42,-36,-4,64,16,41,20,32,38,-84,-22,24,18,40,-62,1,11,-40,15,36,3,18,-10,0,12,6,-5,-12,-1,-14,44,62,-1,-34,78,-13, 
  /* [7][0][][] */ -24,1,-11,75,32,29,5,33,22,2,73,-12,125,102,62,46,43,56,-16,5,25,-13,-87,-40,22,-1,-29,74,31,-35,-35,-12,40,8,33,-95,-78,32,49,63,-34,34,88,127,-64,-40,-110,66, 
};
const TfArray<8, float> quant33_scale = { 8, { 0.0094515793025493622, 0.0056596971116960049, 0.0062964265234768391, 0.0057078022509813309, 0.0079651512205600739, 0.0068353479728102684, 0.007598070427775383, 0.0060942098498344421, } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 13806, 7316, 3849, -133, -130, 614, -143, 36768, -1617, 1334, 6704, 63672, 593, 1660, 245, 14462, -2248, 13371, 604, 7342, 16715, -350, 2865, -8679, 11723, 991, -1013, 13139, 1736, -291, -11807, 9352, 4020, 1464, -811, 3700, -8453, 10069, -2470, 18384, -61, 423, 1505, 1483, 487, -945, 2593, -763, };
const TfArray<48, float> quant34_scale = { 48, { 8.5448933532461524e-05, 0.00012133441487094387, 0.00018055285909213126, 0.00016865866200532764, 0.00073995906859636307, 0.00013585649139713496, 0.00014148882473818958, 9.6532094175927341e-05, 0.000121349046821706, 7.9816403740551323e-05, 7.1396709245163947e-05, 5.0043199735227972e-05, 0.00010145457781618461, 7.3435730882920325e-05, 0.0002329153212485835, 0.00013967821723781526, 0.00011946323502343148, 0.00034950647386722267, 0.00012590295227710158, 0.00016191041504498571, 0.00012509395310189575, 0.0003704656264744699, 0.00012707021960522979, 0.00025883491616696119, 0.00011630663357209414, 6.9358291511889547e-05, 7.2177397669292986e-05, 9.4427487056236714e-05, 0.00013501981447916478, 0.00081823160871863365, 0.00026625825557857752, 8.9803252194542438e-05, 0.0001080499350791797, 0.00015261067892424762, 0.00014544348232448101, 6.5339489083271474e-05, 9.1428220912348479e-05, 4.7128538426477462e-05, 0.00014898533117957413, 6.8366942286957055e-05, 0.00014887093857396394, 0.00014256912982091308, 9.2124166258145124e-05, 9.1914684162475169e-05, 7.7106451499275863e-05, 0.00033867883030325174, 6.4632149587851018e-05, 0.00019876593432854861, } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -38,-72,-10,-4,127,-63,82,-56,-100,-97,-14,-73,105,41,49,-125,56,-27,8,-49,-98,96,-2,53,-5,75,32,-41,75,-75,41,-37,-127,-83,43,71,28,93,114,-84,-123,-18,32,68,60,-127,106,84, -47,-107,-97,66,-91,110,34,-73,-68,39,78,-127,127,95,94,-68,-76,-90,35,-54,-121,88,-65,114,-91,110,80,-127,87,-51,22,-127,-45,-74,78,125,112,127,127,-60,-127,-65,69,84,89,110,111,72, -4,-50,-79,89,-47,-29,7,-29,100,29,55,-99,23,66,-37,-5,-72,-19,36,-39,-58,7,-86,-36,-71,89,21,-89,23,57,91,-76,8,5,2,47,79,78,55,23,-29,104,65,17,43,30,21,-126, 
  /* [0][1][][] */ -107,-111,1,-83,-78,-93,108,-116,-127,-127,89,-96,91,47,-123,-89,127,-127,-61,-69,-84,108,-49,53,-9,117,83,-50,-103,-79,37,-50,-94,-127,-127,77,47,82,3,-98,52,-22,75,127,99,112,127,-124, -120,-127,-109,-104,-33,127,127,-127,109,57,127,-121,105,127,65,-127,58,-99,-127,-127,-127,127,-127,127,-127,127,127,-124,-127,127,-10,-115,-114,-104,49,127,127,117,-1,-127,88,-106,127,124,127,1,127,127, -65,-52,-127,127,76,-50,53,-48,69,46,22,-74,12,60,66,-47,-17,2,-14,-62,-71,-4,-87,-45,-127,73,31,-91,-65,34,127,-61,-50,13,65,73,76,68,-18,-27,42,127,76,13,61,-47,28,32, 
  /* [0][2][][] */ -120,-43,33,19,-33,-44,23,-37,49,-51,23,-40,-5,31,-53,-58,-71,-11,92,-38,-16,28,-52,2,5,106,71,-23,34,55,17,-19,8,-86,-41,37,10,13,-55,-56,14,-8,47,45,28,58,17,-67, -127,-64,-18,-75,100,32,47,-71,115,18,-33,-46,-9,25,-127,-111,35,15,44,-75,-60,65,-53,11,-71,83,74,-29,33,5,-29,-15,-39,-21,-65,42,25,14,-85,-81,20,-57,76,65,19,-112,30,10, -27,-51,-41,-19,-13,-19,9,-49,-65,27,-16,-24,-9,12,18,-50,30,38,-11,-46,-47,8,-3,-64,-74,26,26,-24,-16,-71,34,-7,-53,18,19,48,13,13,-38,-24,2,34,24,18,19,-5,12,58, 
};
const TfArray<48, float> quant35_scale = { 48, { 0.0036315794568508863, 0.005156712606549263, 0.0076734963804483414, 0.0071679931133985519, 0.031448259949684143, 0.0057739010080695152, 0.0060132746584713459, 0.004102613776922226, 0.0051573342643678188, 0.0033921971917152405, 0.0030343600083142519, 0.00212683598510921, 0.0043118195608258247, 0.0031210184097290039, 0.0098989009857177734, 0.005936324130743742, 0.0050771874375641346, 0.014854025095701218, 0.0053508752025663853, 0.0068811927922070026, 0.0053164931014180183, 0.015744788572192192, 0.005400483962148428, 0.011000484228134155, 0.0049430318176746368, 0.0029477274511009455, 0.0030675393063575029, 0.0040131681598722935, 0.0057383417151868343, 0.034774843603372574, 0.011315975338220596, 0.0038166381418704987, 0.0045921220444142818, 0.0064859534613788128, 0.0061813481152057648, 0.0027769282460212708, 0.0038856994360685349, 0.0020029628649353981, 0.0063318763859570026, 0.0029055951163172722, 0.0063270148821175098, 0.0060591879300773144, 0.0039152768440544605, 0.0039063738659024239, 0.0032770240213721991, 0.014393850229680538, 0.0027468663174659014, 0.0084475520998239517, } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 1427, -298, -384, 1128, 17214, 1378, -350, 4393, 1444, 1274, 49, 2870, 1261, 491, -783, 473, 2596, 9887, 2481, -707, 1426, -895, -113, 2980, -277, -488, 1758, -20, 2288, 11091, 2345, -90, 372, -103, 1560, -37, 533, -256, 1146, 985, 1399, 1633, 291, -303, 625, 1412, 1149, -162, };
const TfArray<48, float> quant36_scale = { 48, { 0.00039570516673848033, 0.00048413194599561393, 0.00033470225753262639, 0.00035171519266441464, 6.1125203501433134e-05, 0.00043568419641815126, 0.00061976484721526504, 0.00021625637600664049, 0.00031688043964095414, 0.00056259235134348273, 0.00034949724795296788, 0.00032238604035228491, 0.00023993680952116847, 0.00041430312558077276, 0.00033268250990658998, 0.00037867494393140078, 0.00027372848126105964, 9.6838470199145377e-05, 0.00029710846138186753, 0.00036976195406168699, 0.00035887325066141784, 0.00024426353047601879, 0.0004842238558921963, 0.00027543082251213491, 0.00045490081538446248, 0.00097486062441021204, 0.00032077680225484073, 0.00080845021875575185, 0.00030801276443526149, 8.6603184172417969e-05, 0.00031596299959346652, 0.00079528603237122297, 0.00044214553781785071, 0.00044936814811080694, 0.00040463093318976462, 0.00036602295585907996, 0.00038330649840645492, 0.00068286457099020481, 0.00038438514457084239, 0.00059171603061258793, 0.00038455237518064678, 0.0003902358585037291, 0.00035673510865308344, 0.0005035555805079639, 0.00045496391248889267, 0.00031270892941392958, 0.00031558424234390259, 0.00034119401243515313, } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -54,45,4,-26,-84,-66,-127,25, 
  /* [1][0][][] */ 61,-63,-51,-65,127,-84,98,22, 
  /* [2][0][][] */ -98,127,-50,-127,60,-15,-23,47, 
  /* [3][0][][] */ 26,25,75,-2,102,124,127,2, 
  /* [4][0][][] */ -78,-127,79,-1,-68,-105,-8,-30, 
  /* [5][0][][] */ 127,-14,59,61,-73,-20,1,-20, 
  /* [6][0][][] */ 26,34,127,-27,39,-35,-41,30, 
  /* [7][0][][] */ 29,11,-127,-26,-36,98,99,-68, 
  /* [8][0][][] */ 3,127,-16,1,69,124,53,47, 
  /* [9][0][][] */ 10,127,-63,80,37,-103,55,116, 
  /* [10][0][][] */ 1,-127,-11,-29,-77,-113,-52,-70, 
  /* [11][0][][] */ -127,-81,112,52,-2,-82,107,59, 
  /* [12][0][][] */ -27,40,-127,80,39,-61,-66,95, 
  /* [13][0][][] */ 95,-127,95,87,14,36,41,-56, 
  /* [14][0][][] */ -27,104,-34,-127,-25,-122,-38,-67, 
  /* [15][0][][] */ 41,105,29,-29,29,-65,75,-127, 
  /* [16][0][][] */ -114,-127,-51,100,-47,36,-22,77, 
  /* [17][0][][] */ -19,-108,-127,90,-64,67,-46,66, 
  /* [18][0][][] */ -103,-72,-41,85,-19,69,-13,127, 
  /* [19][0][][] */ 61,-125,105,-127,7,-70,27,-34, 
  /* [20][0][][] */ 7,88,43,13,46,127,81,-28, 
  /* [21][0][][] */ 27,108,43,-30,36,-69,92,-127, 
  /* [22][0][][] */ 17,7,108,27,-9,127,42,-35, 
  /* [23][0][][] */ -107,-71,37,-83,86,92,-62,-127, 
  /* [24][0][][] */ -95,-92,38,-87,111,101,-43,-127, 
  /* [25][0][][] */ 127,16,-53,-15,14,23,-62,-13, 
  /* [26][0][][] */ -127,-28,-125,-22,-48,-35,14,2, 
  /* [27][0][][] */ 83,38,-6,-62,-127,-30,85,90, 
  /* [28][0][][] */ -127,-74,7,43,-72,-116,20,-9, 
  /* [29][0][][] */ 116,102,34,-127,37,11,-53,-90, 
  /* [30][0][][] */ -77,-65,43,-66,72,92,-49,-127, 
  /* [31][0][][] */ 47,38,-8,127,2,-66,3,19, 
  /* [32][0][][] */ -35,127,-10,40,27,70,-16,52, 
  /* [33][0][][] */ -38,127,-71,29,26,-31,-25,-1, 
  /* [34][0][][] */ -127,-101,-52,90,-5,8,9,100, 
  /* [35][0][][] */ -49,127,-28,0,68,115,53,72, 
  /* [36][0][][] */ 78,34,-5,-44,-126,-22,99,127, 
  /* [37][0][][] */ -74,104,23,17,-127,101,-20,-93, 
  /* [38][0][][] */ 32,45,42,24,127,75,107,44, 
  /* [39][0][][] */ -25,-75,29,-31,4,39,-95,127, 
  /* [40][0][][] */ -79,-68,-73,127,-34,-5,17,64, 
  /* [41][0][][] */ 127,10,60,82,-46,9,13,-14, 
  /* [42][0][][] */ -48,6,-68,-127,60,-107,8,82, 
  /* [43][0][][] */ 24,-3,84,-4,37,127,85,12, 
  /* [44][0][][] */ -25,-25,-63,127,46,8,-39,-35, 
  /* [45][0][][] */ 56,127,94,-107,37,-54,28,-104, 
  /* [46][0][][] */ -41,-127,-44,24,-13,37,-70,122, 
  /* [47][0][][] */ 35,56,117,-8,121,103,127,-23, 
};
const TfArray<48, float> quant37_scale = { 48, { 0.003610407467931509, 0.0044172117486596107, 0.0030538178980350494, 0.0032090435270220041, 0.00055770535254850984, 0.0039751753211021423, 0.0056547243148088455, 0.0019731195643544197, 0.0028912117704749107, 0.0051330830901861191, 0.003188807051628828, 0.0029414447490125895, 0.0021891794167459011, 0.0037800949066877365, 0.0030353895854204893, 0.003455023979768157, 0.0024974939879029989, 0.00088355259504169226, 0.0027108127251267433, 0.0033737020567059517, 0.0032743534538894892, 0.002228656318038702, 0.004418050404638052, 0.0025130261201411486, 0.0041505075059831142, 0.008894612081348896, 0.0029267622157931328, 0.0073762862011790276, 0.0028103033546358347, 0.00079016602830961347, 0.0028828410431742668, 0.0072561763226985931, 0.0040341285057365894, 0.0041000274941325188, 0.0036918460391461849, 0.0033395872451364994, 0.0034972820430994034, 0.0062304451130330563, 0.0035071237944066525, 0.0053988071158528328, 0.0035086495336145163, 0.0035605055745691061, 0.0032548452727496624, 0.0045944326557219028, 0.0041510830633342266, 0.0028531511779874563, 0.0028793853707611561, 0.0031130483839660883, } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -7914, -3076, 12015, -10261, 24249, 7512, -7904, 11968, };
const TfArray<8, float> quant38_scale = { 8, { 0.00020227849017828703, 0.00022615845955442637, 0.00017590234347153455, 0.00024921490694396198, 0.00018427459872327745, 0.00016543103265576065, 0.00017099198885262012, 0.00026221119333058596, } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -9,-13,-21,-59,-28,-33,15,-21,33,12,-26,-3,107,127,-22,-106, 
  /* [1][0][][] */ 127,-60,-41,14,-51,73,-73,-44,-37,82,-34,-49,-8,4,-61,-18, 
  /* [2][0][][] */ -36,-90,42,41,45,-61,-77,-17,28,-91,26,-127,46,-22,-73,23, 
  /* [3][0][][] */ 34,12,20,17,-5,68,-50,-21,127,46,9,23,7,-14,12,21, 
  /* [4][0][][] */ -98,-37,-22,-127,-3,34,48,-120,31,-25,-53,-39,-119,27,-47,-20, 
  /* [5][0][][] */ 84,51,72,-25,46,-45,-127,-120,-18,-73,60,45,-55,54,55,-36, 
  /* [6][0][][] */ 98,38,-127,-77,19,-63,-1,-89,-35,19,-110,85,82,-86,8,59, 
  /* [7][0][][] */ -127,-4,97,-26,-67,3,0,-63,-54,63,90,-32,61,-24,30,29, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.008596835657954216, 0.0096117341890931129, 0.0074758497066795826, 0.01059163361787796, 0.007831670343875885, 0.0070308186113834381, 0.0072671594098210335, 0.011143974959850311, } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { 24212, -259, 93, 3506, 24, 126, 9709, 1563, -292, 189, -1950, 3288, 1403, -179, -430, -1052, };
const TfArray<16, float> quant40_scale = { 16, { 9.5904739282559603e-05, 0.00018135416030418128, 0.00016584063996560872, 0.00017824518727138638, 0.0010861419141292572, 0.00078334461431950331, 0.00015844806330278516, 0.00080091966083273292, 0.00031038644374348223, 0.0011343065416440368, 0.00023159880947787315, 0.0001884189696284011, 0.0001010954802040942, 0.00035441812360659242, 0.00018941095913760364, 0.00057475839275866747, } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 7,-3,3,-2,-20,12,13,16,-9,-11,2,-9,1,-9,4,-4, 10,-9,3,-1,13,-2,17,-27,-8,9,-8,93,-8,18,9,-2, 7,-6,-4,-2,3,-13,4,10,1,2,-1,-5,-7,-8,3,-3, 
  /* [0][1][][] */ 15,-15,-4,1,127,-23,-127,-21,127,127,-8,-8,118,-26,-6,-22, -127,127,127,0,-93,-90,-13,-103,21,-105,127,127,127,127,127,127, 24,-10,-10,0,-13,127,7,-11,-2,-12,-7,-7,1,-6,-13,-10, 
  /* [0][2][][] */ 2,-3,1,-11,-24,16,51,8,-17,-8,-6,2,-6,-1,1,-14, 22,-27,-3,-127,1,-16,-10,127,-3,1,-6,-15,-6,-61,-11,-37, 5,-3,0,-2,-3,-5,-2,-3,-1,2,-10,3,0,-9,-2,-12, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0040759514085948467, 0.0077075515873730183, 0.0070482268929481506, 0.0075754201970994473, 0.046161029487848282, 0.033292144536972046, 0.0067340424284338951, 0.034039083868265152, 0.013191423378884792, 0.048208028078079224, 0.0098429489880800247, 0.0080078057944774628, 0.0042965579777956009, 0.015062769874930382, 0.0080499658361077309, 0.024427231401205063, } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&g0::quant8_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { 1411, 206, -136, 4604, 63857, 44494, 2714, 891, 6614, 4306, 1390, 78, 5666, -4253, -17, 36606, };
const TfArray<16, float> quant42_scale = { 16, { 0.00020245353516656905, 0.0007652431377209723, 0.00024393343483097851, 0.00015460413123946637, 2.4584733182564378e-05, 3.6403900594450533e-05, 0.00013989230501465499, 2.951548776763957e-05, 0.00014972440840210766, 3.5448458220344037e-05, 0.00040444440674036741, 0.00064444844610989094, 0.00030677509494125843, 1.7426566046196967e-05, 0.00060198694700375199, 4.6649187424918637e-05, } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -86, -110, -30, 
  /* [0][1][][] */ 66, -37, 16, 
  /* [0][2][][] */ 32, 127, 19, 
  /* [1][0][][] */ 105, -95, -10, 
  /* [1][1][][] */ -127, 104, 24, 
  /* [1][2][][] */ 14, -2, -13, 
  /* [2][0][][] */ -23, -2, -47, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -94, -78, 
  /* [3][0][][] */ 113, 118, 53, 
  /* [3][1][][] */ -2, -25, -17, 
  /* [3][2][][] */ -102, -127, -46, 
  /* [4][0][][] */ 25, -51, -7, 
  /* [4][1][][] */ 18, -127, -6, 
  /* [4][2][][] */ 10, -90, -21, 
  /* [5][0][][] */ -54, 37, -4, 
  /* [5][1][][] */ -127, 40, 1, 
  /* [5][2][][] */ -86, 31, -1, 
  /* [6][0][][] */ -14, 80, 127, 
  /* [6][1][][] */ -48, 57, -14, 
  /* [6][2][][] */ -34, -49, -85, 
  /* [7][0][][] */ 45, 28, -13, 
  /* [7][1][][] */ 127, 69, -6, 
  /* [7][2][][] */ 38, 7, -21, 
  /* [8][0][][] */ -22, -31, 52, 
  /* [8][1][][] */ -54, -87, 127, 
  /* [8][2][][] */ -26, -62, 96, 
  /* [9][0][][] */ -16, 53, -8, 
  /* [9][1][][] */ -11, 127, -8, 
  /* [9][2][][] */ -5, 85, -3, 
  /* [10][0][][] */ 25, 87, 12, 
  /* [10][1][][] */ -37, -127, -29, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 65, -94, 35, 
  /* [11][2][][] */ -85, 127, -46, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 113, 5, 
  /* [12][2][][] */ -78, 79, 5, 
  /* [13][0][][] */ 78, 20, -8, 
  /* [13][1][][] */ 127, 90, 2, 
  /* [13][2][][] */ 72, 100, 44, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 45, 98, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -92, -24, 31, 
  /* [15][1][][] */ -127, -114, 33, 
  /* [15][2][][] */ -26, -73, 2, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.051625646650791168, 0.19513699412345886, 0.062203023582696915, 0.039424050599336624, 0.0062691066414117813, 0.0092829940840601921, 0.035672534257173538, 0.0075264489278197289, 0.038179721683263779, 0.0090393563732504845, 0.10313332080841064, 0.16433434188365936, 0.07822764664888382, 0.0044437739998102188, 0.15350666642189026, 0.011895542033016682, } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.10960125178098679, } };
const TfArray<1, int> quant46_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.073977932333946228, } };
const TfArray<1, int> quant50_zero = { 1, { -33 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<1, float> quant53_scale = { 1, { 0.078427530825138092, } };
const TfArray<1, int> quant53_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<1, float> quant54_scale = { 1, { 0.096145346760749817, } };
const TfArray<1, int> quant54_zero = { 1, { -34 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.059149269014596939, } };
const TfArray<1, int> quant58_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant61_scale = { 1, { 0.064222477376461029, } };
const TfArray<1, int> quant61_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<1, float> quant62_scale = { 1, { 0.070119582116603851, } };
const TfArray<1, int> quant62_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<1, float> quant65_scale = { 1, { 0.048408716917037964, } };
const TfArray<1, int> quant65_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<1, float> quant66_scale = { 1, { 0.077525690197944641, } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&g0::quant65_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.046981360763311386, } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.14842323958873749, } };
const TfArray<1, int> quant69_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 576), (TfLiteIntArray*)&g0::tensor_dimension69, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension69, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_775455_10_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_775455_10_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_775455_10_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_775455_10_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_775455_10_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
